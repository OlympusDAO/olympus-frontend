name: Lighthouse PWA Test

on:
  push:
    branches: [ master, develop ]
  pull_request:
    branches: [ master, develop ]

#
jobs:
  lighthouse-local-static:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Build PWA distribution for production
      run: |
          yarn install --frozen-lockfile
          yarn build
      env:
          CI: false
    - name: Run Lighthouse PWA check against local static files.
      uses: treosh/lighthouse-ci-action@v8
      with:
          # no urls needed, since it uses local folder to scan .html files
          # budgetPath: '.github/lighthouse/budget.json' # uncommment if we want custom performance budgets
          configPath: '.github/lighthouse/lighthouserc-static-dist-dir.yml'
          uploadArtifacts: true # save results as github action artifacts
          temporaryPublicStorage: true # upload lighthouse report to the temporary storage
    - name: Run Lighthouse against a local app deployment.
      uses: treosh/lighthouse-ci-action@v8
      with:
        urls: |
          http://localhost:3000
#         ${{ steps.deploy.outputs.deployUrl }}
        uploadArtifacts: true # save results as an action artifacts
        temporaryPublicStorage: true # upload lighthouse report to the temporary storage
       # budgetPath: '.github/lighthouse/budget.json' # performance budgets
        configPath: '.github/lighthouse/lighthouserc-local-deploy.json' # PWA checks


  lighthouse-local-deploy:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Install local app
      run: |
          yarn install --frozen-lockfile
    - name: Run Lighthouse against a local app deployment.
      uses: treosh/lighthouse-ci-action@v8
      with:
        urls: |
          http://localhost:3000
#         ${{ steps.deploy.outputs.deployUrl }}
        uploadArtifacts: true # save results as an action artifacts
        temporaryPublicStorage: true # upload lighthouse report to the temporary storage
       # budgetPath: '.github/lighthouse/budget.json' # performance budgets
        configPath: '.github/lighthouse/lighthouserc-local-deploy.json' # PWA checks

# The section below is commented out until we have FLEEK_API_KEY in github env vars
#    - name: Preview Deployment
#      id: deploy
#      uses: fleekhq/action-deploy@v1
#      with:
#        apiKey: ${{ secrets.FLEEK_API_KEY }}
#    - name: Get the output url
#      run: echo "Fleek test deploy url is ${{ steps.deploy.outputs.deployUrl }}"
#    - name: Run Lighthouse PWA check against Fleek test site deployment


# once we establish a minimum performance base with lighthouse, we can enable the check below to
# keep an eye on the prod site
#
#  lighthouse-prod-deploy:
#    runs-on: ubuntu-latest
#    name: Run Lighthouse against prod deployment.
#    steps:
#    - uses: actions/checkout@v2
#    - name: Run Lighthouse PWA sanity check against the existing Fleek production deployment
#      uses: treosh/lighthouse-ci-action@v8
#      with:
#        urls: |
#          https://app.olympusdao.finance/
#        uploadArtifacts: true # save results as an action artifacts
#        temporaryPublicStorage: true # upload lighthouse report to the temporary storage
        # budgetPath: '.github/lighthouse/budget.json' # performance budgets
#        configPath: '.github/lighthouse/lighthouserc-prod-deploy.json' # PWA checks

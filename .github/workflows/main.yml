name: Main CI

on:
  push:
    branches: [master, develop]
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout front end code.
        uses: actions/checkout@v3
      - name: Download base coverage report
        id: base-coverage
        uses: actions/cache@v3
        with: 
          path: coverage
          key: ${{ github.base_ref }}
      - name: Run unit tests with no base report
        if: steps.base-coverage.cache-hit != 'true'
        uses: ArtiomTr/jest-coverage-report-action@v2.0.5
        with:
          test-script: yarn test:unit --silent
          package-manager: yarn
          github-token: ${{ secrets.GITHUB_TOKEN }}
      - name: Run unit unit tests with base branch report
        if: steps.base-coverage.cache-hit == 'true'
        uses: ArtiomTr/jest-coverage-report-action@v2.0.5
        with:
          test-script: yarn test:unit --silent
          package-manager: yarn
          github-token: ${{ secrets.GITHUB_TOKEN }}
          base-coverage-file: ./coverage/coverage-summary.json
      - name: Cache the coverage after run
        id: branch-coverage
        uses: actions/cache@v3
        with: 
          path: coverage
          key: ${{ github.ref }}
      - name: Prepare coverage badges
        run: |
          echo "COVERAGE_BRANCHES_PCT=$(echo $(jq .total.branches.pct coverage/coverage-summary.json))" >> $GITHUB_ENV
          echo "COVERAGE_LINES_PCT=$(echo $(jq .total.lines.pct coverage/coverage-summary.json))" >> $GITHUB_ENV
          echo "COVERAGE_STATEMENTS_PCT=$(echo $(jq .total.statements.pct coverage/coverage-summary.json))" >> $GITHUB_ENV
          echo "COVERAGE_FUNCTIONS_PCT=$(echo $(jq .total.functions.pct coverage/coverage-summary.json))" >> $GITHUB_ENV

          # get branch name
          REF=${{ github.ref }}
          echo "github.ref: $REF"
          IFS='/' read -ra PATHS <<< "$REF"
          BRANCH_NAME="${PATHS[1]}_${PATHS[2]}"
          echo "BRANCH=$(echo ${BRANCH_NAME})" >> $GITHUB_ENV
      - name: Create coverage branches badge
        uses: schneegans/dynamic-badges-action@v1.0.0
        with:
          auth: ${{ secrets.GIST_SECRET }}
          gistID: d630a3bd1cf13bb3dc3c1925df28efcd
          filename: olympus-frontend__coverage__branches__${{ env.BRANCH }}.json
          label: Branches Coverage
          message: ${{ env.COVERAGE_BRANCHES_PCT}}%
          color: blue
          namedLogo: jest
          logoColor: lightblue
      - name: Create coverage lines badge
        uses: schneegans/dynamic-badges-action@v1.0.0
        with:
          auth: ${{ secrets.GIST_SECRET }}
          gistID: d630a3bd1cf13bb3dc3c1925df28efcd
          filename: olympus-frontend__coverage__lines__${{ env.BRANCH }}.json
          label: Lines Coverage
          message: ${{ env.COVERAGE_LINES_PCT}}%
          color: blue
          namedLogo: jest
          logoColor: lightblue
      - name: Create coverage statements badge
        uses: schneegans/dynamic-badges-action@v1.0.0
        with:
          auth: ${{ secrets.GIST_SECRET }}
          gistID: d630a3bd1cf13bb3dc3c1925df28efcd
          filename: olympus-frontend__coverage__statements__${{ env.BRANCH }}.json
          label: Statements Coverage
          message: ${{ env.COVERAGE_STATEMENTS_PCT}}%
          color: blue
          namedLogo: jest
          logoColor: lightblue
      - name: Create coverage functions badge
        uses: schneegans/dynamic-badges-action@v1.0.0
        with:
          auth: ${{ secrets.GIST_SECRET }}
          gistID: d630a3bd1cf13bb3dc3c1925df28efcd
          filename: olympus-frontend__coverage__functions__${{ env.BRANCH }}.json
          label: Functions Coverage
          message: ${{ env.COVERAGE_FUNCTIONS_PCT}}%
          color: blue
          namedLogo: jest
          logoColor: lightblue

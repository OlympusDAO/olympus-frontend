/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface OHMPreSaleInterface extends ethers.utils.Interface {
  functions: {
    "DAI()": FunctionFragment;
    "aOHM()": FunctionFragment;
    "addressToSendDai()": FunctionFragment;
    "calculateSaleQuote(uint256)": FunctionFragment;
    "endOfSale()": FunctionFragment;
    "getAllotmentPerBuyer()": FunctionFragment;
    "initialize(address,address,uint256,uint256)": FunctionFragment;
    "owner()": FunctionFragment;
    "purchaseaOHM(uint256)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "salePrice()": FunctionFragment;
    "saleStarted()": FunctionFragment;
    "sendRemainingaOHM(address)": FunctionFragment;
    "totalWhiteListed()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "whiteListBuyers(address[])": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "DAI", values?: undefined): string;
  encodeFunctionData(functionFragment: "aOHM", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "addressToSendDai",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "calculateSaleQuote",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "endOfSale", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getAllotmentPerBuyer",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "purchaseaOHM",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "salePrice", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "saleStarted",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "sendRemainingaOHM",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "totalWhiteListed",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "whiteListBuyers",
    values: [string[]]
  ): string;

  decodeFunctionResult(functionFragment: "DAI", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "aOHM", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addressToSendDai",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateSaleQuote",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "endOfSale", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAllotmentPerBuyer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "purchaseaOHM",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "salePrice", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "saleStarted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sendRemainingaOHM",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalWhiteListed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "whiteListBuyers",
    data: BytesLike
  ): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export class OHMPreSale extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: OHMPreSaleInterface;

  functions: {
    DAI(overrides?: CallOverrides): Promise<[string]>;

    aOHM(overrides?: CallOverrides): Promise<[string]>;

    addressToSendDai(overrides?: CallOverrides): Promise<[string]>;

    calculateSaleQuote(
      paymentAmount_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    endOfSale(overrides?: CallOverrides): Promise<[BigNumber]>;

    getAllotmentPerBuyer(overrides?: CallOverrides): Promise<[BigNumber]>;

    initialize(
      _dai: string,
      _aOHM: string,
      _salePrice: BigNumberish,
      _saleLength: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    purchaseaOHM(
      _amountDAI: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    salePrice(overrides?: CallOverrides): Promise<[BigNumber]>;

    saleStarted(overrides?: CallOverrides): Promise<[boolean]>;

    sendRemainingaOHM(
      _sendaOHMTo: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    totalWhiteListed(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferOwnership(
      newOwner_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    whiteListBuyers(
      _buyers: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  DAI(overrides?: CallOverrides): Promise<string>;

  aOHM(overrides?: CallOverrides): Promise<string>;

  addressToSendDai(overrides?: CallOverrides): Promise<string>;

  calculateSaleQuote(
    paymentAmount_: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  endOfSale(overrides?: CallOverrides): Promise<BigNumber>;

  getAllotmentPerBuyer(overrides?: CallOverrides): Promise<BigNumber>;

  initialize(
    _dai: string,
    _aOHM: string,
    _salePrice: BigNumberish,
    _saleLength: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  purchaseaOHM(
    _amountDAI: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  salePrice(overrides?: CallOverrides): Promise<BigNumber>;

  saleStarted(overrides?: CallOverrides): Promise<boolean>;

  sendRemainingaOHM(
    _sendaOHMTo: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  totalWhiteListed(overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  whiteListBuyers(
    _buyers: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    DAI(overrides?: CallOverrides): Promise<string>;

    aOHM(overrides?: CallOverrides): Promise<string>;

    addressToSendDai(overrides?: CallOverrides): Promise<string>;

    calculateSaleQuote(
      paymentAmount_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    endOfSale(overrides?: CallOverrides): Promise<BigNumber>;

    getAllotmentPerBuyer(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _dai: string,
      _aOHM: string,
      _salePrice: BigNumberish,
      _saleLength: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    owner(overrides?: CallOverrides): Promise<string>;

    purchaseaOHM(
      _amountDAI: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    salePrice(overrides?: CallOverrides): Promise<BigNumber>;

    saleStarted(overrides?: CallOverrides): Promise<boolean>;

    sendRemainingaOHM(
      _sendaOHMTo: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    totalWhiteListed(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner_: string,
      overrides?: CallOverrides
    ): Promise<void>;

    whiteListBuyers(
      _buyers: string[],
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;
  };

  estimateGas: {
    DAI(overrides?: CallOverrides): Promise<BigNumber>;

    aOHM(overrides?: CallOverrides): Promise<BigNumber>;

    addressToSendDai(overrides?: CallOverrides): Promise<BigNumber>;

    calculateSaleQuote(
      paymentAmount_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    endOfSale(overrides?: CallOverrides): Promise<BigNumber>;

    getAllotmentPerBuyer(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _dai: string,
      _aOHM: string,
      _salePrice: BigNumberish,
      _saleLength: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    purchaseaOHM(
      _amountDAI: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    salePrice(overrides?: CallOverrides): Promise<BigNumber>;

    saleStarted(overrides?: CallOverrides): Promise<BigNumber>;

    sendRemainingaOHM(
      _sendaOHMTo: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    totalWhiteListed(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    whiteListBuyers(
      _buyers: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    DAI(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    aOHM(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addressToSendDai(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    calculateSaleQuote(
      paymentAmount_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    endOfSale(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAllotmentPerBuyer(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _dai: string,
      _aOHM: string,
      _salePrice: BigNumberish,
      _saleLength: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    purchaseaOHM(
      _amountDAI: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    salePrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    saleStarted(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    sendRemainingaOHM(
      _sendaOHMTo: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    totalWhiteListed(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    whiteListBuyers(
      _buyers: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}

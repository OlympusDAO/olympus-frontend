/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface PrizePoolAbiInterface extends ethers.utils.Interface {
  functions: {
    "accountedBalance()": FunctionFragment;
    "award(address,uint256,address)": FunctionFragment;
    "awardBalance()": FunctionFragment;
    "awardExternalERC20(address,address,uint256)": FunctionFragment;
    "awardExternalERC721(address,address,uint256[])": FunctionFragment;
    "balance()": FunctionFragment;
    "balanceOfCredit(address,address)": FunctionFragment;
    "beforeTokenTransfer(address,address,uint256)": FunctionFragment;
    "calculateEarlyExitFee(address,address,uint256)": FunctionFragment;
    "calculateReserveFee(uint256)": FunctionFragment;
    "calculateTimelockDuration(address,address,uint256)": FunctionFragment;
    "canAwardExternal(address)": FunctionFragment;
    "captureAwardBalance()": FunctionFragment;
    "compLikeDelegate(address,address)": FunctionFragment;
    "creditPlanOf(address)": FunctionFragment;
    "depositTo(address,uint256,address,address)": FunctionFragment;
    "estimateCreditAccrualTime(address,uint256,uint256)": FunctionFragment;
    "initialize(address,address[],uint256,uint256)": FunctionFragment;
    "liquidityCap()": FunctionFragment;
    "maxExitFeeMantissa()": FunctionFragment;
    "maxTimelockDuration()": FunctionFragment;
    "owner()": FunctionFragment;
    "prizeStrategy()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "reserveRegistry()": FunctionFragment;
    "reserveTotalSupply()": FunctionFragment;
    "setCreditPlanOf(address,uint128,uint128)": FunctionFragment;
    "setLiquidityCap(uint256)": FunctionFragment;
    "setPrizeStrategy(address)": FunctionFragment;
    "sweepTimelockBalances(address[])": FunctionFragment;
    "timelockBalanceAvailableAt(address)": FunctionFragment;
    "timelockBalanceOf(address)": FunctionFragment;
    "timelockDepositTo(address,uint256,address)": FunctionFragment;
    "timelockTotalSupply()": FunctionFragment;
    "token()": FunctionFragment;
    "tokens()": FunctionFragment;
    "transferExternalERC20(address,address,uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "withdrawInstantlyFrom(address,uint256,address,uint256)": FunctionFragment;
    "withdrawReserve(address)": FunctionFragment;
    "withdrawWithTimelockFrom(address,uint256,address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "accountedBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "award",
    values: [string, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "awardBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "awardExternalERC20",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "awardExternalERC721",
    values: [string, string, BigNumberish[]]
  ): string;
  encodeFunctionData(functionFragment: "balance", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "balanceOfCredit",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "beforeTokenTransfer",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateEarlyExitFee",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateReserveFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateTimelockDuration",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "canAwardExternal",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "captureAwardBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "compLikeDelegate",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "creditPlanOf",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "depositTo",
    values: [string, BigNumberish, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "estimateCreditAccrualTime",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, string[], BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "liquidityCap",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxExitFeeMantissa",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxTimelockDuration",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "prizeStrategy",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "reserveRegistry",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "reserveTotalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setCreditPlanOf",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setLiquidityCap",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setPrizeStrategy",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "sweepTimelockBalances",
    values: [string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "timelockBalanceAvailableAt",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "timelockBalanceOf",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "timelockDepositTo",
    values: [string, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "timelockTotalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "token", values?: undefined): string;
  encodeFunctionData(functionFragment: "tokens", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "transferExternalERC20",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawInstantlyFrom",
    values: [string, BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawReserve",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawWithTimelockFrom",
    values: [string, BigNumberish, string]
  ): string;

  decodeFunctionResult(
    functionFragment: "accountedBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "award", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "awardBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "awardExternalERC20",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "awardExternalERC721",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "balance", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "balanceOfCredit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "beforeTokenTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateEarlyExitFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateReserveFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateTimelockDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "canAwardExternal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "captureAwardBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "compLikeDelegate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "creditPlanOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "depositTo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "estimateCreditAccrualTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "liquidityCap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxExitFeeMantissa",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxTimelockDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "prizeStrategy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reserveRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reserveTotalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCreditPlanOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLiquidityCap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPrizeStrategy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sweepTimelockBalances",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "timelockBalanceAvailableAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "timelockBalanceOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "timelockDepositTo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "timelockTotalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "token", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tokens", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferExternalERC20",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawInstantlyFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawReserve",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawWithTimelockFrom",
    data: BytesLike
  ): Result;

  events: {
    "AwardCaptured(uint256)": EventFragment;
    "Awarded(address,address,uint256)": EventFragment;
    "AwardedExternalERC20(address,address,uint256)": EventFragment;
    "AwardedExternalERC721(address,address,uint256[])": EventFragment;
    "ControlledTokenAdded(address)": EventFragment;
    "CreditBurned(address,address,uint256)": EventFragment;
    "CreditMinted(address,address,uint256)": EventFragment;
    "CreditPlanSet(address,uint128,uint128)": EventFragment;
    "Deposited(address,address,address,uint256,address)": EventFragment;
    "Initialized(address,uint256,uint256)": EventFragment;
    "InstantWithdrawal(address,address,address,uint256,uint256,uint256)": EventFragment;
    "LiquidityCapSet(uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "PrizeStrategySet(address)": EventFragment;
    "ReserveFeeCaptured(uint256)": EventFragment;
    "ReserveWithdrawal(address,uint256)": EventFragment;
    "StakePrizePoolInitialized(address)": EventFragment;
    "TimelockDeposited(address,address,address,uint256)": EventFragment;
    "TimelockedWithdrawal(address,address,address,uint256,uint256)": EventFragment;
    "TimelockedWithdrawalSwept(address,address,uint256,uint256)": EventFragment;
    "TransferredExternalERC20(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AwardCaptured"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Awarded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AwardedExternalERC20"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AwardedExternalERC721"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ControlledTokenAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CreditBurned"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CreditMinted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CreditPlanSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Deposited"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "InstantWithdrawal"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LiquidityCapSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PrizeStrategySet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ReserveFeeCaptured"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ReserveWithdrawal"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StakePrizePoolInitialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TimelockDeposited"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TimelockedWithdrawal"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TimelockedWithdrawalSwept"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransferredExternalERC20"): EventFragment;
}

export type AwardCapturedEvent = TypedEvent<
  [BigNumber] & { amount: BigNumber }
>;

export type AwardedEvent = TypedEvent<
  [string, string, BigNumber] & {
    winner: string;
    token: string;
    amount: BigNumber;
  }
>;

export type AwardedExternalERC20Event = TypedEvent<
  [string, string, BigNumber] & {
    winner: string;
    token: string;
    amount: BigNumber;
  }
>;

export type AwardedExternalERC721Event = TypedEvent<
  [string, string, BigNumber[]] & {
    winner: string;
    token: string;
    tokenIds: BigNumber[];
  }
>;

export type ControlledTokenAddedEvent = TypedEvent<
  [string] & { token: string }
>;

export type CreditBurnedEvent = TypedEvent<
  [string, string, BigNumber] & {
    user: string;
    token: string;
    amount: BigNumber;
  }
>;

export type CreditMintedEvent = TypedEvent<
  [string, string, BigNumber] & {
    user: string;
    token: string;
    amount: BigNumber;
  }
>;

export type CreditPlanSetEvent = TypedEvent<
  [string, BigNumber, BigNumber] & {
    token: string;
    creditLimitMantissa: BigNumber;
    creditRateMantissa: BigNumber;
  }
>;

export type DepositedEvent = TypedEvent<
  [string, string, string, BigNumber, string] & {
    operator: string;
    to: string;
    token: string;
    amount: BigNumber;
    referrer: string;
  }
>;

export type InitializedEvent = TypedEvent<
  [string, BigNumber, BigNumber] & {
    reserveRegistry: string;
    maxExitFeeMantissa: BigNumber;
    maxTimelockDuration: BigNumber;
  }
>;

export type InstantWithdrawalEvent = TypedEvent<
  [string, string, string, BigNumber, BigNumber, BigNumber] & {
    operator: string;
    from: string;
    token: string;
    amount: BigNumber;
    redeemed: BigNumber;
    exitFee: BigNumber;
  }
>;

export type LiquidityCapSetEvent = TypedEvent<
  [BigNumber] & { liquidityCap: BigNumber }
>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export type PrizeStrategySetEvent = TypedEvent<
  [string] & { prizeStrategy: string }
>;

export type ReserveFeeCapturedEvent = TypedEvent<
  [BigNumber] & { amount: BigNumber }
>;

export type ReserveWithdrawalEvent = TypedEvent<
  [string, BigNumber] & { to: string; amount: BigNumber }
>;

export type StakePrizePoolInitializedEvent = TypedEvent<
  [string] & { stakeToken: string }
>;

export type TimelockDepositedEvent = TypedEvent<
  [string, string, string, BigNumber] & {
    operator: string;
    to: string;
    token: string;
    amount: BigNumber;
  }
>;

export type TimelockedWithdrawalEvent = TypedEvent<
  [string, string, string, BigNumber, BigNumber] & {
    operator: string;
    from: string;
    token: string;
    amount: BigNumber;
    unlockTimestamp: BigNumber;
  }
>;

export type TimelockedWithdrawalSweptEvent = TypedEvent<
  [string, string, BigNumber, BigNumber] & {
    operator: string;
    from: string;
    amount: BigNumber;
    redeemed: BigNumber;
  }
>;

export type TransferredExternalERC20Event = TypedEvent<
  [string, string, BigNumber] & { to: string; token: string; amount: BigNumber }
>;

export class PrizePoolAbi extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: PrizePoolAbiInterface;

  functions: {
    accountedBalance(overrides?: CallOverrides): Promise<[BigNumber]>;

    award(
      to: string,
      amount: BigNumberish,
      controlledToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    awardBalance(overrides?: CallOverrides): Promise<[BigNumber]>;

    awardExternalERC20(
      to: string,
      externalToken: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    awardExternalERC721(
      to: string,
      externalToken: string,
      tokenIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    balance(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    balanceOfCredit(
      user: string,
      controlledToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    beforeTokenTransfer(
      from: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    calculateEarlyExitFee(
      from: string,
      controlledToken: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    calculateReserveFee(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    calculateTimelockDuration(
      from: string,
      controlledToken: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    canAwardExternal(
      _externalToken: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    captureAwardBalance(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    compLikeDelegate(
      compLike: string,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    creditPlanOf(
      controlledToken: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        creditLimitMantissa: BigNumber;
        creditRateMantissa: BigNumber;
      }
    >;

    depositTo(
      to: string,
      amount: BigNumberish,
      controlledToken: string,
      referrer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    estimateCreditAccrualTime(
      _controlledToken: string,
      _principal: BigNumberish,
      _interest: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { durationSeconds: BigNumber }>;

    "initialize(address,address[],uint256,uint256)"(
      _reserveRegistry: string,
      _controlledTokens: string[],
      _maxExitFeeMantissa: BigNumberish,
      _maxTimelockDuration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "initialize(address,address[],uint256,uint256,address)"(
      _reserveRegistry: string,
      _controlledTokens: string[],
      _maxExitFeeMantissa: BigNumberish,
      _maxTimelockDuration: BigNumberish,
      _stakeToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    liquidityCap(overrides?: CallOverrides): Promise<[BigNumber]>;

    maxExitFeeMantissa(overrides?: CallOverrides): Promise<[BigNumber]>;

    maxTimelockDuration(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    prizeStrategy(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    reserveRegistry(overrides?: CallOverrides): Promise<[string]>;

    reserveTotalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    setCreditPlanOf(
      _controlledToken: string,
      _creditRateMantissa: BigNumberish,
      _creditLimitMantissa: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setLiquidityCap(
      _liquidityCap: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPrizeStrategy(
      _prizeStrategy: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    sweepTimelockBalances(
      users: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    timelockBalanceAvailableAt(
      user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    timelockBalanceOf(
      user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    timelockDepositTo(
      to: string,
      amount: BigNumberish,
      controlledToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    timelockTotalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    token(overrides?: CallOverrides): Promise<[string]>;

    tokens(overrides?: CallOverrides): Promise<[string[]]>;

    transferExternalERC20(
      to: string,
      externalToken: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawInstantlyFrom(
      from: string,
      amount: BigNumberish,
      controlledToken: string,
      maximumExitFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawReserve(
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawWithTimelockFrom(
      from: string,
      amount: BigNumberish,
      controlledToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  accountedBalance(overrides?: CallOverrides): Promise<BigNumber>;

  award(
    to: string,
    amount: BigNumberish,
    controlledToken: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  awardBalance(overrides?: CallOverrides): Promise<BigNumber>;

  awardExternalERC20(
    to: string,
    externalToken: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  awardExternalERC721(
    to: string,
    externalToken: string,
    tokenIds: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  balance(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  balanceOfCredit(
    user: string,
    controlledToken: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  beforeTokenTransfer(
    from: string,
    to: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  calculateEarlyExitFee(
    from: string,
    controlledToken: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  calculateReserveFee(
    amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  calculateTimelockDuration(
    from: string,
    controlledToken: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  canAwardExternal(
    _externalToken: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  captureAwardBalance(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  compLikeDelegate(
    compLike: string,
    to: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  creditPlanOf(
    controlledToken: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & {
      creditLimitMantissa: BigNumber;
      creditRateMantissa: BigNumber;
    }
  >;

  depositTo(
    to: string,
    amount: BigNumberish,
    controlledToken: string,
    referrer: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  estimateCreditAccrualTime(
    _controlledToken: string,
    _principal: BigNumberish,
    _interest: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "initialize(address,address[],uint256,uint256)"(
    _reserveRegistry: string,
    _controlledTokens: string[],
    _maxExitFeeMantissa: BigNumberish,
    _maxTimelockDuration: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "initialize(address,address[],uint256,uint256,address)"(
    _reserveRegistry: string,
    _controlledTokens: string[],
    _maxExitFeeMantissa: BigNumberish,
    _maxTimelockDuration: BigNumberish,
    _stakeToken: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  liquidityCap(overrides?: CallOverrides): Promise<BigNumber>;

  maxExitFeeMantissa(overrides?: CallOverrides): Promise<BigNumber>;

  maxTimelockDuration(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  prizeStrategy(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  reserveRegistry(overrides?: CallOverrides): Promise<string>;

  reserveTotalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  setCreditPlanOf(
    _controlledToken: string,
    _creditRateMantissa: BigNumberish,
    _creditLimitMantissa: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setLiquidityCap(
    _liquidityCap: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPrizeStrategy(
    _prizeStrategy: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  sweepTimelockBalances(
    users: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  timelockBalanceAvailableAt(
    user: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  timelockBalanceOf(
    user: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  timelockDepositTo(
    to: string,
    amount: BigNumberish,
    controlledToken: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  timelockTotalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  token(overrides?: CallOverrides): Promise<string>;

  tokens(overrides?: CallOverrides): Promise<string[]>;

  transferExternalERC20(
    to: string,
    externalToken: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawInstantlyFrom(
    from: string,
    amount: BigNumberish,
    controlledToken: string,
    maximumExitFee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawReserve(
    to: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawWithTimelockFrom(
    from: string,
    amount: BigNumberish,
    controlledToken: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    accountedBalance(overrides?: CallOverrides): Promise<BigNumber>;

    award(
      to: string,
      amount: BigNumberish,
      controlledToken: string,
      overrides?: CallOverrides
    ): Promise<void>;

    awardBalance(overrides?: CallOverrides): Promise<BigNumber>;

    awardExternalERC20(
      to: string,
      externalToken: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    awardExternalERC721(
      to: string,
      externalToken: string,
      tokenIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    balance(overrides?: CallOverrides): Promise<BigNumber>;

    balanceOfCredit(
      user: string,
      controlledToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    beforeTokenTransfer(
      from: string,
      to: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    calculateEarlyExitFee(
      from: string,
      controlledToken: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { exitFee: BigNumber; burnedCredit: BigNumber }
    >;

    calculateReserveFee(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateTimelockDuration(
      from: string,
      controlledToken: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        durationSeconds: BigNumber;
        burnedCredit: BigNumber;
      }
    >;

    canAwardExternal(
      _externalToken: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    captureAwardBalance(overrides?: CallOverrides): Promise<BigNumber>;

    compLikeDelegate(
      compLike: string,
      to: string,
      overrides?: CallOverrides
    ): Promise<void>;

    creditPlanOf(
      controlledToken: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        creditLimitMantissa: BigNumber;
        creditRateMantissa: BigNumber;
      }
    >;

    depositTo(
      to: string,
      amount: BigNumberish,
      controlledToken: string,
      referrer: string,
      overrides?: CallOverrides
    ): Promise<void>;

    estimateCreditAccrualTime(
      _controlledToken: string,
      _principal: BigNumberish,
      _interest: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "initialize(address,address[],uint256,uint256)"(
      _reserveRegistry: string,
      _controlledTokens: string[],
      _maxExitFeeMantissa: BigNumberish,
      _maxTimelockDuration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "initialize(address,address[],uint256,uint256,address)"(
      _reserveRegistry: string,
      _controlledTokens: string[],
      _maxExitFeeMantissa: BigNumberish,
      _maxTimelockDuration: BigNumberish,
      _stakeToken: string,
      overrides?: CallOverrides
    ): Promise<void>;

    liquidityCap(overrides?: CallOverrides): Promise<BigNumber>;

    maxExitFeeMantissa(overrides?: CallOverrides): Promise<BigNumber>;

    maxTimelockDuration(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    prizeStrategy(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    reserveRegistry(overrides?: CallOverrides): Promise<string>;

    reserveTotalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    setCreditPlanOf(
      _controlledToken: string,
      _creditRateMantissa: BigNumberish,
      _creditLimitMantissa: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setLiquidityCap(
      _liquidityCap: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setPrizeStrategy(
      _prizeStrategy: string,
      overrides?: CallOverrides
    ): Promise<void>;

    sweepTimelockBalances(
      users: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    timelockBalanceAvailableAt(
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    timelockBalanceOf(
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    timelockDepositTo(
      to: string,
      amount: BigNumberish,
      controlledToken: string,
      overrides?: CallOverrides
    ): Promise<void>;

    timelockTotalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    token(overrides?: CallOverrides): Promise<string>;

    tokens(overrides?: CallOverrides): Promise<string[]>;

    transferExternalERC20(
      to: string,
      externalToken: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawInstantlyFrom(
      from: string,
      amount: BigNumberish,
      controlledToken: string,
      maximumExitFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdrawReserve(to: string, overrides?: CallOverrides): Promise<BigNumber>;

    withdrawWithTimelockFrom(
      from: string,
      amount: BigNumberish,
      controlledToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    "AwardCaptured(uint256)"(
      amount?: null
    ): TypedEventFilter<[BigNumber], { amount: BigNumber }>;

    AwardCaptured(
      amount?: null
    ): TypedEventFilter<[BigNumber], { amount: BigNumber }>;

    "Awarded(address,address,uint256)"(
      winner?: string | null,
      token?: string | null,
      amount?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { winner: string; token: string; amount: BigNumber }
    >;

    Awarded(
      winner?: string | null,
      token?: string | null,
      amount?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { winner: string; token: string; amount: BigNumber }
    >;

    "AwardedExternalERC20(address,address,uint256)"(
      winner?: string | null,
      token?: string | null,
      amount?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { winner: string; token: string; amount: BigNumber }
    >;

    AwardedExternalERC20(
      winner?: string | null,
      token?: string | null,
      amount?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { winner: string; token: string; amount: BigNumber }
    >;

    "AwardedExternalERC721(address,address,uint256[])"(
      winner?: string | null,
      token?: string | null,
      tokenIds?: null
    ): TypedEventFilter<
      [string, string, BigNumber[]],
      { winner: string; token: string; tokenIds: BigNumber[] }
    >;

    AwardedExternalERC721(
      winner?: string | null,
      token?: string | null,
      tokenIds?: null
    ): TypedEventFilter<
      [string, string, BigNumber[]],
      { winner: string; token: string; tokenIds: BigNumber[] }
    >;

    "ControlledTokenAdded(address)"(
      token?: string | null
    ): TypedEventFilter<[string], { token: string }>;

    ControlledTokenAdded(
      token?: string | null
    ): TypedEventFilter<[string], { token: string }>;

    "CreditBurned(address,address,uint256)"(
      user?: string | null,
      token?: string | null,
      amount?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { user: string; token: string; amount: BigNumber }
    >;

    CreditBurned(
      user?: string | null,
      token?: string | null,
      amount?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { user: string; token: string; amount: BigNumber }
    >;

    "CreditMinted(address,address,uint256)"(
      user?: string | null,
      token?: string | null,
      amount?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { user: string; token: string; amount: BigNumber }
    >;

    CreditMinted(
      user?: string | null,
      token?: string | null,
      amount?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { user: string; token: string; amount: BigNumber }
    >;

    "CreditPlanSet(address,uint128,uint128)"(
      token?: null,
      creditLimitMantissa?: null,
      creditRateMantissa?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      {
        token: string;
        creditLimitMantissa: BigNumber;
        creditRateMantissa: BigNumber;
      }
    >;

    CreditPlanSet(
      token?: null,
      creditLimitMantissa?: null,
      creditRateMantissa?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      {
        token: string;
        creditLimitMantissa: BigNumber;
        creditRateMantissa: BigNumber;
      }
    >;

    "Deposited(address,address,address,uint256,address)"(
      operator?: string | null,
      to?: string | null,
      token?: string | null,
      amount?: null,
      referrer?: null
    ): TypedEventFilter<
      [string, string, string, BigNumber, string],
      {
        operator: string;
        to: string;
        token: string;
        amount: BigNumber;
        referrer: string;
      }
    >;

    Deposited(
      operator?: string | null,
      to?: string | null,
      token?: string | null,
      amount?: null,
      referrer?: null
    ): TypedEventFilter<
      [string, string, string, BigNumber, string],
      {
        operator: string;
        to: string;
        token: string;
        amount: BigNumber;
        referrer: string;
      }
    >;

    "Initialized(address,uint256,uint256)"(
      reserveRegistry?: null,
      maxExitFeeMantissa?: null,
      maxTimelockDuration?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      {
        reserveRegistry: string;
        maxExitFeeMantissa: BigNumber;
        maxTimelockDuration: BigNumber;
      }
    >;

    Initialized(
      reserveRegistry?: null,
      maxExitFeeMantissa?: null,
      maxTimelockDuration?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      {
        reserveRegistry: string;
        maxExitFeeMantissa: BigNumber;
        maxTimelockDuration: BigNumber;
      }
    >;

    "InstantWithdrawal(address,address,address,uint256,uint256,uint256)"(
      operator?: string | null,
      from?: string | null,
      token?: string | null,
      amount?: null,
      redeemed?: null,
      exitFee?: null
    ): TypedEventFilter<
      [string, string, string, BigNumber, BigNumber, BigNumber],
      {
        operator: string;
        from: string;
        token: string;
        amount: BigNumber;
        redeemed: BigNumber;
        exitFee: BigNumber;
      }
    >;

    InstantWithdrawal(
      operator?: string | null,
      from?: string | null,
      token?: string | null,
      amount?: null,
      redeemed?: null,
      exitFee?: null
    ): TypedEventFilter<
      [string, string, string, BigNumber, BigNumber, BigNumber],
      {
        operator: string;
        from: string;
        token: string;
        amount: BigNumber;
        redeemed: BigNumber;
        exitFee: BigNumber;
      }
    >;

    "LiquidityCapSet(uint256)"(
      liquidityCap?: null
    ): TypedEventFilter<[BigNumber], { liquidityCap: BigNumber }>;

    LiquidityCapSet(
      liquidityCap?: null
    ): TypedEventFilter<[BigNumber], { liquidityCap: BigNumber }>;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    "PrizeStrategySet(address)"(
      prizeStrategy?: string | null
    ): TypedEventFilter<[string], { prizeStrategy: string }>;

    PrizeStrategySet(
      prizeStrategy?: string | null
    ): TypedEventFilter<[string], { prizeStrategy: string }>;

    "ReserveFeeCaptured(uint256)"(
      amount?: null
    ): TypedEventFilter<[BigNumber], { amount: BigNumber }>;

    ReserveFeeCaptured(
      amount?: null
    ): TypedEventFilter<[BigNumber], { amount: BigNumber }>;

    "ReserveWithdrawal(address,uint256)"(
      to?: string | null,
      amount?: null
    ): TypedEventFilter<[string, BigNumber], { to: string; amount: BigNumber }>;

    ReserveWithdrawal(
      to?: string | null,
      amount?: null
    ): TypedEventFilter<[string, BigNumber], { to: string; amount: BigNumber }>;

    "StakePrizePoolInitialized(address)"(
      stakeToken?: string | null
    ): TypedEventFilter<[string], { stakeToken: string }>;

    StakePrizePoolInitialized(
      stakeToken?: string | null
    ): TypedEventFilter<[string], { stakeToken: string }>;

    "TimelockDeposited(address,address,address,uint256)"(
      operator?: string | null,
      to?: string | null,
      token?: string | null,
      amount?: null
    ): TypedEventFilter<
      [string, string, string, BigNumber],
      { operator: string; to: string; token: string; amount: BigNumber }
    >;

    TimelockDeposited(
      operator?: string | null,
      to?: string | null,
      token?: string | null,
      amount?: null
    ): TypedEventFilter<
      [string, string, string, BigNumber],
      { operator: string; to: string; token: string; amount: BigNumber }
    >;

    "TimelockedWithdrawal(address,address,address,uint256,uint256)"(
      operator?: string | null,
      from?: string | null,
      token?: string | null,
      amount?: null,
      unlockTimestamp?: null
    ): TypedEventFilter<
      [string, string, string, BigNumber, BigNumber],
      {
        operator: string;
        from: string;
        token: string;
        amount: BigNumber;
        unlockTimestamp: BigNumber;
      }
    >;

    TimelockedWithdrawal(
      operator?: string | null,
      from?: string | null,
      token?: string | null,
      amount?: null,
      unlockTimestamp?: null
    ): TypedEventFilter<
      [string, string, string, BigNumber, BigNumber],
      {
        operator: string;
        from: string;
        token: string;
        amount: BigNumber;
        unlockTimestamp: BigNumber;
      }
    >;

    "TimelockedWithdrawalSwept(address,address,uint256,uint256)"(
      operator?: string | null,
      from?: string | null,
      amount?: null,
      redeemed?: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber],
      { operator: string; from: string; amount: BigNumber; redeemed: BigNumber }
    >;

    TimelockedWithdrawalSwept(
      operator?: string | null,
      from?: string | null,
      amount?: null,
      redeemed?: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber],
      { operator: string; from: string; amount: BigNumber; redeemed: BigNumber }
    >;

    "TransferredExternalERC20(address,address,uint256)"(
      to?: string | null,
      token?: string | null,
      amount?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { to: string; token: string; amount: BigNumber }
    >;

    TransferredExternalERC20(
      to?: string | null,
      token?: string | null,
      amount?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { to: string; token: string; amount: BigNumber }
    >;
  };

  estimateGas: {
    accountedBalance(overrides?: CallOverrides): Promise<BigNumber>;

    award(
      to: string,
      amount: BigNumberish,
      controlledToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    awardBalance(overrides?: CallOverrides): Promise<BigNumber>;

    awardExternalERC20(
      to: string,
      externalToken: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    awardExternalERC721(
      to: string,
      externalToken: string,
      tokenIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    balance(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    balanceOfCredit(
      user: string,
      controlledToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    beforeTokenTransfer(
      from: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    calculateEarlyExitFee(
      from: string,
      controlledToken: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    calculateReserveFee(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateTimelockDuration(
      from: string,
      controlledToken: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    canAwardExternal(
      _externalToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    captureAwardBalance(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    compLikeDelegate(
      compLike: string,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    creditPlanOf(
      controlledToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    depositTo(
      to: string,
      amount: BigNumberish,
      controlledToken: string,
      referrer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    estimateCreditAccrualTime(
      _controlledToken: string,
      _principal: BigNumberish,
      _interest: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "initialize(address,address[],uint256,uint256)"(
      _reserveRegistry: string,
      _controlledTokens: string[],
      _maxExitFeeMantissa: BigNumberish,
      _maxTimelockDuration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "initialize(address,address[],uint256,uint256,address)"(
      _reserveRegistry: string,
      _controlledTokens: string[],
      _maxExitFeeMantissa: BigNumberish,
      _maxTimelockDuration: BigNumberish,
      _stakeToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    liquidityCap(overrides?: CallOverrides): Promise<BigNumber>;

    maxExitFeeMantissa(overrides?: CallOverrides): Promise<BigNumber>;

    maxTimelockDuration(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    prizeStrategy(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    reserveRegistry(overrides?: CallOverrides): Promise<BigNumber>;

    reserveTotalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    setCreditPlanOf(
      _controlledToken: string,
      _creditRateMantissa: BigNumberish,
      _creditLimitMantissa: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setLiquidityCap(
      _liquidityCap: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPrizeStrategy(
      _prizeStrategy: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    sweepTimelockBalances(
      users: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    timelockBalanceAvailableAt(
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    timelockBalanceOf(
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    timelockDepositTo(
      to: string,
      amount: BigNumberish,
      controlledToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    timelockTotalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    token(overrides?: CallOverrides): Promise<BigNumber>;

    tokens(overrides?: CallOverrides): Promise<BigNumber>;

    transferExternalERC20(
      to: string,
      externalToken: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawInstantlyFrom(
      from: string,
      amount: BigNumberish,
      controlledToken: string,
      maximumExitFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawReserve(
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawWithTimelockFrom(
      from: string,
      amount: BigNumberish,
      controlledToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    accountedBalance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    award(
      to: string,
      amount: BigNumberish,
      controlledToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    awardBalance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    awardExternalERC20(
      to: string,
      externalToken: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    awardExternalERC721(
      to: string,
      externalToken: string,
      tokenIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    balance(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    balanceOfCredit(
      user: string,
      controlledToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    beforeTokenTransfer(
      from: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    calculateEarlyExitFee(
      from: string,
      controlledToken: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    calculateReserveFee(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calculateTimelockDuration(
      from: string,
      controlledToken: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    canAwardExternal(
      _externalToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    captureAwardBalance(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    compLikeDelegate(
      compLike: string,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    creditPlanOf(
      controlledToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    depositTo(
      to: string,
      amount: BigNumberish,
      controlledToken: string,
      referrer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    estimateCreditAccrualTime(
      _controlledToken: string,
      _principal: BigNumberish,
      _interest: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "initialize(address,address[],uint256,uint256)"(
      _reserveRegistry: string,
      _controlledTokens: string[],
      _maxExitFeeMantissa: BigNumberish,
      _maxTimelockDuration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "initialize(address,address[],uint256,uint256,address)"(
      _reserveRegistry: string,
      _controlledTokens: string[],
      _maxExitFeeMantissa: BigNumberish,
      _maxTimelockDuration: BigNumberish,
      _stakeToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    liquidityCap(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxExitFeeMantissa(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    maxTimelockDuration(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    prizeStrategy(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    reserveRegistry(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    reserveTotalSupply(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setCreditPlanOf(
      _controlledToken: string,
      _creditRateMantissa: BigNumberish,
      _creditLimitMantissa: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setLiquidityCap(
      _liquidityCap: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPrizeStrategy(
      _prizeStrategy: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    sweepTimelockBalances(
      users: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    timelockBalanceAvailableAt(
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    timelockBalanceOf(
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    timelockDepositTo(
      to: string,
      amount: BigNumberish,
      controlledToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    timelockTotalSupply(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    token(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokens(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferExternalERC20(
      to: string,
      externalToken: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawInstantlyFrom(
      from: string,
      amount: BigNumberish,
      controlledToken: string,
      maximumExitFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawReserve(
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawWithTimelockFrom(
      from: string,
      amount: BigNumberish,
      controlledToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}

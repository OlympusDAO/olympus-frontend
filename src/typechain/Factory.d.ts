/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface FactoryInterface extends ethers.utils.Interface {
  functions: {
    "STRICT_LIQUIDATION_LIVENESS()": FunctionFragment;
    "STRICT_WITHDRAWAL_LIVENESS()": FunctionFragment;
    "buyerPotions(address,uint256)": FunctionFragment;
    "buyerRevitalPots(address,uint256)": FunctionFragment;
    "collateralCurrency()": FunctionFragment;
    "collateralTokenWhitelist()": FunctionFragment;
    "contractsAddress(uint256)": FunctionFragment;
    "dataBook(address)": FunctionFragment;
    "getCurrentTime()": FunctionFragment;
    "mintedDeposit(address)": FunctionFragment;
    "mintedPrice(address)": FunctionFragment;
    "revitalBook(address)": FunctionFragment;
    "setCurrentTime(uint256)": FunctionFragment;
    "timerAddress()": FunctionFragment;
    "tokenFactoryAddress()": FunctionFragment;
    "validExpirationTimestamps(uint256)": FunctionFragment;
    "writeMintPotion(tuple,address,tuple,tuple)": FunctionFragment;
    "revitalisePotion(address,address,tuple,tuple,tuple,tuple)": FunctionFragment;
    "withdrawPotion(uint256,address,address)": FunctionFragment;
    "getPotionData(address)": FunctionFragment;
    "getContractAddressList()": FunctionFragment;
    "getBuyerPotions(address)": FunctionFragment;
    "getBuyerRevitalPots(address)": FunctionFragment;
    "getRevitalID(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "STRICT_LIQUIDATION_LIVENESS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "STRICT_WITHDRAWAL_LIVENESS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "buyerPotions",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "buyerRevitalPots",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "collateralCurrency",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "collateralTokenWhitelist",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "contractsAddress",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "dataBook", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getCurrentTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mintedDeposit",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "mintedPrice", values: [string]): string;
  encodeFunctionData(functionFragment: "revitalBook", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setCurrentTime",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "timerAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tokenFactoryAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "validExpirationTimestamps",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "writeMintPotion",
    values: [
      {
        expirationTimestamp: BigNumberish;
        collateralAddress: string;
        priceFeedIdentifier: string;
        assetClass: string;
        syntheticName: string;
        syntheticSymbol: string;
        collateralRequirement: { rawValue: BigNumberish };
        disputeBondPct: { rawValue: BigNumberish };
        sponsorDisputeRewardPct: { rawValue: BigNumberish };
        disputerDisputeRewardPct: { rawValue: BigNumberish };
        strikePrice: { rawValue: BigNumberish };
        assetPrice: { rawValue: BigNumberish };
      },
      string,
      { rawValue: BigNumberish },
      { rawValue: BigNumberish }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "revitalisePotion",
    values: [
      string,
      string,
      { rawValue: BigNumberish },
      { rawValue: BigNumberish },
      { rawValue: BigNumberish },
      { rawValue: BigNumberish }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawPotion",
    values: [BigNumberish, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getPotionData",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getContractAddressList",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBuyerPotions",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getBuyerRevitalPots",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getRevitalID",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "STRICT_LIQUIDATION_LIVENESS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "STRICT_WITHDRAWAL_LIVENESS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "buyerPotions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "buyerRevitalPots",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collateralCurrency",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collateralTokenWhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "contractsAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "dataBook", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mintedDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mintedPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revitalBook",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCurrentTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "timerAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenFactoryAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validExpirationTimestamps",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "writeMintPotion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revitalisePotion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawPotion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPotionData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getContractAddressList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBuyerPotions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBuyerRevitalPots",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRevitalID",
    data: BytesLike
  ): Result;

  events: {
    "CreatedPotion(address,address)": EventFragment;
    "RevitalisedPotion(uint256,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "CreatedPotion"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RevitalisedPotion"): EventFragment;
}

export type CreatedPotionEvent = TypedEvent<
  [string, string] & {
    expiringMultiPartyAddress: string;
    deployerAddress: string;
  }
>;

export type RevitalisedPotionEvent = TypedEvent<
  [BigNumber, string] & { LiquidationID: BigNumber; deployerAddress: string }
>;

export class Factory extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: FactoryInterface;

  functions: {
    STRICT_LIQUIDATION_LIVENESS(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    STRICT_WITHDRAWAL_LIVENESS(overrides?: CallOverrides): Promise<[BigNumber]>;

    buyerPotions(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    buyerRevitalPots(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    collateralCurrency(overrides?: CallOverrides): Promise<[string]>;

    collateralTokenWhitelist(overrides?: CallOverrides): Promise<[string]>;

    contractsAddress(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    dataBook(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        string,
        [BigNumber] & { rawValue: BigNumber },
        [BigNumber] & { rawValue: BigNumber },
        [BigNumber] & { rawValue: BigNumber },
        BigNumber,
        [BigNumber] & { rawValue: BigNumber },
        [BigNumber] & { rawValue: BigNumber }
      ] & {
        expira: BigNumber;
        assetClass: string;
        mintedSkPrice: [BigNumber] & { rawValue: BigNumber };
        mintedAsPrice: [BigNumber] & { rawValue: BigNumber };
        mintedDep: [BigNumber] & { rawValue: BigNumber };
        revID: BigNumber;
        amountRevital: [BigNumber] & { rawValue: BigNumber };
        collateralWithdraw: [BigNumber] & { rawValue: BigNumber };
      }
    >;

    /**
     * Gets the current time. Will return the last time set in `setCurrentTime` if running in test mode. Otherwise, it will return the block timestamp.
     */
    getCurrentTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    mintedDeposit(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { rawValue: BigNumber }>;

    mintedPrice(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { rawValue: BigNumber }>;

    revitalBook(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    /**
     * Will revert if not running in test mode.
     * Sets the current time.
     * @param time timestamp to set current Testable time to.
     */
    setCurrentTime(
      time: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    timerAddress(overrides?: CallOverrides): Promise<[string]>;

    tokenFactoryAddress(overrides?: CallOverrides): Promise<[string]>;

    validExpirationTimestamps(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    writeMintPotion(
      params: {
        expirationTimestamp: BigNumberish;
        collateralAddress: string;
        priceFeedIdentifier: string;
        assetClass: string;
        syntheticName: string;
        syntheticSymbol: string;
        collateralRequirement: { rawValue: BigNumberish };
        disputeBondPct: { rawValue: BigNumberish };
        sponsorDisputeRewardPct: { rawValue: BigNumberish };
        disputerDisputeRewardPct: { rawValue: BigNumberish };
        strikePrice: { rawValue: BigNumberish };
        assetPrice: { rawValue: BigNumberish };
      },
      poolAddress: string,
      nTokens: { rawValue: BigNumberish },
      deposit: { rawValue: BigNumberish },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    revitalisePotion(
      potionAddress: string,
      poolAddress: string,
      nTokens: { rawValue: BigNumberish },
      assetPrice: { rawValue: BigNumberish },
      dvmBond: { rawValue: BigNumberish },
      finalDeposit: { rawValue: BigNumberish },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawPotion(
      revitalID: BigNumberish,
      potionAddress: string,
      poolAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * **************************************         FRONTEND DATA FUNCTIONS           ****************************************
     */
    getPotionData(
      potionAddrs: string,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        string,
        [BigNumber] & { rawValue: BigNumber },
        [BigNumber] & { rawValue: BigNumber },
        [BigNumber] & { rawValue: BigNumber },
        BigNumber,
        [BigNumber] & { rawValue: BigNumber },
        [BigNumber] & { rawValue: BigNumber }
      ] & {
        expiry: BigNumber;
        asset: string;
        mintSprice: [BigNumber] & { rawValue: BigNumber };
        mintAprice: [BigNumber] & { rawValue: BigNumber };
        mintDepo: [BigNumber] & { rawValue: BigNumber };
        revitID: BigNumber;
        amountRev: [BigNumber] & { rawValue: BigNumber };
        collateralToWithdraw: [BigNumber] & { rawValue: BigNumber };
      }
    >;

    /**
     * **************************************         FACTORY DATA FUNCTIONS           ****************************************
     */
    getContractAddressList(
      overrides?: CallOverrides
    ): Promise<[string[]] & { list: string[] }>;

    /**
     * **************************************         BUYER DATA FUNCTIONS           ****************************************
     */
    getBuyerPotions(
      buyer: string,
      overrides?: CallOverrides
    ): Promise<[string[]] & { list: string[] }>;

    getBuyerRevitalPots(
      buyer: string,
      overrides?: CallOverrides
    ): Promise<[string[]] & { list: string[] }>;

    /**
     * **************************************         REVITAL DATA FUNCTIONS           ****************************************
     */
    getRevitalID(
      potionAddress: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { price: BigNumber }>;
  };

  STRICT_LIQUIDATION_LIVENESS(overrides?: CallOverrides): Promise<BigNumber>;

  STRICT_WITHDRAWAL_LIVENESS(overrides?: CallOverrides): Promise<BigNumber>;

  buyerPotions(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  buyerRevitalPots(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  collateralCurrency(overrides?: CallOverrides): Promise<string>;

  collateralTokenWhitelist(overrides?: CallOverrides): Promise<string>;

  contractsAddress(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  dataBook(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      string,
      [BigNumber] & { rawValue: BigNumber },
      [BigNumber] & { rawValue: BigNumber },
      [BigNumber] & { rawValue: BigNumber },
      BigNumber,
      [BigNumber] & { rawValue: BigNumber },
      [BigNumber] & { rawValue: BigNumber }
    ] & {
      expira: BigNumber;
      assetClass: string;
      mintedSkPrice: [BigNumber] & { rawValue: BigNumber };
      mintedAsPrice: [BigNumber] & { rawValue: BigNumber };
      mintedDep: [BigNumber] & { rawValue: BigNumber };
      revID: BigNumber;
      amountRevital: [BigNumber] & { rawValue: BigNumber };
      collateralWithdraw: [BigNumber] & { rawValue: BigNumber };
    }
  >;

  /**
   * Gets the current time. Will return the last time set in `setCurrentTime` if running in test mode. Otherwise, it will return the block timestamp.
   */
  getCurrentTime(overrides?: CallOverrides): Promise<BigNumber>;

  mintedDeposit(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  mintedPrice(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  revitalBook(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  /**
   * Will revert if not running in test mode.
   * Sets the current time.
   * @param time timestamp to set current Testable time to.
   */
  setCurrentTime(
    time: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  timerAddress(overrides?: CallOverrides): Promise<string>;

  tokenFactoryAddress(overrides?: CallOverrides): Promise<string>;

  validExpirationTimestamps(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  writeMintPotion(
    params: {
      expirationTimestamp: BigNumberish;
      collateralAddress: string;
      priceFeedIdentifier: string;
      assetClass: string;
      syntheticName: string;
      syntheticSymbol: string;
      collateralRequirement: { rawValue: BigNumberish };
      disputeBondPct: { rawValue: BigNumberish };
      sponsorDisputeRewardPct: { rawValue: BigNumberish };
      disputerDisputeRewardPct: { rawValue: BigNumberish };
      strikePrice: { rawValue: BigNumberish };
      assetPrice: { rawValue: BigNumberish };
    },
    poolAddress: string,
    nTokens: { rawValue: BigNumberish },
    deposit: { rawValue: BigNumberish },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  revitalisePotion(
    potionAddress: string,
    poolAddress: string,
    nTokens: { rawValue: BigNumberish },
    assetPrice: { rawValue: BigNumberish },
    dvmBond: { rawValue: BigNumberish },
    finalDeposit: { rawValue: BigNumberish },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawPotion(
    revitalID: BigNumberish,
    potionAddress: string,
    poolAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * **************************************         FRONTEND DATA FUNCTIONS           ****************************************
   */
  getPotionData(
    potionAddrs: string,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      string,
      [BigNumber] & { rawValue: BigNumber },
      [BigNumber] & { rawValue: BigNumber },
      [BigNumber] & { rawValue: BigNumber },
      BigNumber,
      [BigNumber] & { rawValue: BigNumber },
      [BigNumber] & { rawValue: BigNumber }
    ] & {
      expiry: BigNumber;
      asset: string;
      mintSprice: [BigNumber] & { rawValue: BigNumber };
      mintAprice: [BigNumber] & { rawValue: BigNumber };
      mintDepo: [BigNumber] & { rawValue: BigNumber };
      revitID: BigNumber;
      amountRev: [BigNumber] & { rawValue: BigNumber };
      collateralToWithdraw: [BigNumber] & { rawValue: BigNumber };
    }
  >;

  /**
   * **************************************         FACTORY DATA FUNCTIONS           ****************************************
   */
  getContractAddressList(overrides?: CallOverrides): Promise<string[]>;

  /**
   * **************************************         BUYER DATA FUNCTIONS           ****************************************
   */
  getBuyerPotions(buyer: string, overrides?: CallOverrides): Promise<string[]>;

  getBuyerRevitalPots(
    buyer: string,
    overrides?: CallOverrides
  ): Promise<string[]>;

  /**
   * **************************************         REVITAL DATA FUNCTIONS           ****************************************
   */
  getRevitalID(
    potionAddress: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    STRICT_LIQUIDATION_LIVENESS(overrides?: CallOverrides): Promise<BigNumber>;

    STRICT_WITHDRAWAL_LIVENESS(overrides?: CallOverrides): Promise<BigNumber>;

    buyerPotions(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    buyerRevitalPots(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    collateralCurrency(overrides?: CallOverrides): Promise<string>;

    collateralTokenWhitelist(overrides?: CallOverrides): Promise<string>;

    contractsAddress(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    dataBook(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        string,
        [BigNumber] & { rawValue: BigNumber },
        [BigNumber] & { rawValue: BigNumber },
        [BigNumber] & { rawValue: BigNumber },
        BigNumber,
        [BigNumber] & { rawValue: BigNumber },
        [BigNumber] & { rawValue: BigNumber }
      ] & {
        expira: BigNumber;
        assetClass: string;
        mintedSkPrice: [BigNumber] & { rawValue: BigNumber };
        mintedAsPrice: [BigNumber] & { rawValue: BigNumber };
        mintedDep: [BigNumber] & { rawValue: BigNumber };
        revID: BigNumber;
        amountRevital: [BigNumber] & { rawValue: BigNumber };
        collateralWithdraw: [BigNumber] & { rawValue: BigNumber };
      }
    >;

    /**
     * Gets the current time. Will return the last time set in `setCurrentTime` if running in test mode. Otherwise, it will return the block timestamp.
     */
    getCurrentTime(overrides?: CallOverrides): Promise<BigNumber>;

    mintedDeposit(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    mintedPrice(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    revitalBook(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Will revert if not running in test mode.
     * Sets the current time.
     * @param time timestamp to set current Testable time to.
     */
    setCurrentTime(
      time: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    timerAddress(overrides?: CallOverrides): Promise<string>;

    tokenFactoryAddress(overrides?: CallOverrides): Promise<string>;

    validExpirationTimestamps(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    writeMintPotion(
      params: {
        expirationTimestamp: BigNumberish;
        collateralAddress: string;
        priceFeedIdentifier: string;
        assetClass: string;
        syntheticName: string;
        syntheticSymbol: string;
        collateralRequirement: { rawValue: BigNumberish };
        disputeBondPct: { rawValue: BigNumberish };
        sponsorDisputeRewardPct: { rawValue: BigNumberish };
        disputerDisputeRewardPct: { rawValue: BigNumberish };
        strikePrice: { rawValue: BigNumberish };
        assetPrice: { rawValue: BigNumberish };
      },
      poolAddress: string,
      nTokens: { rawValue: BigNumberish },
      deposit: { rawValue: BigNumberish },
      overrides?: CallOverrides
    ): Promise<void>;

    revitalisePotion(
      potionAddress: string,
      poolAddress: string,
      nTokens: { rawValue: BigNumberish },
      assetPrice: { rawValue: BigNumberish },
      dvmBond: { rawValue: BigNumberish },
      finalDeposit: { rawValue: BigNumberish },
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawPotion(
      revitalID: BigNumberish,
      potionAddress: string,
      poolAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * **************************************         FRONTEND DATA FUNCTIONS           ****************************************
     */
    getPotionData(
      potionAddrs: string,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        string,
        [BigNumber] & { rawValue: BigNumber },
        [BigNumber] & { rawValue: BigNumber },
        [BigNumber] & { rawValue: BigNumber },
        BigNumber,
        [BigNumber] & { rawValue: BigNumber },
        [BigNumber] & { rawValue: BigNumber }
      ] & {
        expiry: BigNumber;
        asset: string;
        mintSprice: [BigNumber] & { rawValue: BigNumber };
        mintAprice: [BigNumber] & { rawValue: BigNumber };
        mintDepo: [BigNumber] & { rawValue: BigNumber };
        revitID: BigNumber;
        amountRev: [BigNumber] & { rawValue: BigNumber };
        collateralToWithdraw: [BigNumber] & { rawValue: BigNumber };
      }
    >;

    /**
     * **************************************         FACTORY DATA FUNCTIONS           ****************************************
     */
    getContractAddressList(overrides?: CallOverrides): Promise<string[]>;

    /**
     * **************************************         BUYER DATA FUNCTIONS           ****************************************
     */
    getBuyerPotions(
      buyer: string,
      overrides?: CallOverrides
    ): Promise<string[]>;

    getBuyerRevitalPots(
      buyer: string,
      overrides?: CallOverrides
    ): Promise<string[]>;

    /**
     * **************************************         REVITAL DATA FUNCTIONS           ****************************************
     */
    getRevitalID(
      potionAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    "CreatedPotion(address,address)"(
      expiringMultiPartyAddress?: string | null,
      deployerAddress?: string | null
    ): TypedEventFilter<
      [string, string],
      { expiringMultiPartyAddress: string; deployerAddress: string }
    >;

    CreatedPotion(
      expiringMultiPartyAddress?: string | null,
      deployerAddress?: string | null
    ): TypedEventFilter<
      [string, string],
      { expiringMultiPartyAddress: string; deployerAddress: string }
    >;

    "RevitalisedPotion(uint256,address)"(
      LiquidationID?: null,
      deployerAddress?: string | null
    ): TypedEventFilter<
      [BigNumber, string],
      { LiquidationID: BigNumber; deployerAddress: string }
    >;

    RevitalisedPotion(
      LiquidationID?: null,
      deployerAddress?: string | null
    ): TypedEventFilter<
      [BigNumber, string],
      { LiquidationID: BigNumber; deployerAddress: string }
    >;
  };

  estimateGas: {
    STRICT_LIQUIDATION_LIVENESS(overrides?: CallOverrides): Promise<BigNumber>;

    STRICT_WITHDRAWAL_LIVENESS(overrides?: CallOverrides): Promise<BigNumber>;

    buyerPotions(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    buyerRevitalPots(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    collateralCurrency(overrides?: CallOverrides): Promise<BigNumber>;

    collateralTokenWhitelist(overrides?: CallOverrides): Promise<BigNumber>;

    contractsAddress(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    dataBook(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Gets the current time. Will return the last time set in `setCurrentTime` if running in test mode. Otherwise, it will return the block timestamp.
     */
    getCurrentTime(overrides?: CallOverrides): Promise<BigNumber>;

    mintedDeposit(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    mintedPrice(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    revitalBook(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Will revert if not running in test mode.
     * Sets the current time.
     * @param time timestamp to set current Testable time to.
     */
    setCurrentTime(
      time: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    timerAddress(overrides?: CallOverrides): Promise<BigNumber>;

    tokenFactoryAddress(overrides?: CallOverrides): Promise<BigNumber>;

    validExpirationTimestamps(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    writeMintPotion(
      params: {
        expirationTimestamp: BigNumberish;
        collateralAddress: string;
        priceFeedIdentifier: string;
        assetClass: string;
        syntheticName: string;
        syntheticSymbol: string;
        collateralRequirement: { rawValue: BigNumberish };
        disputeBondPct: { rawValue: BigNumberish };
        sponsorDisputeRewardPct: { rawValue: BigNumberish };
        disputerDisputeRewardPct: { rawValue: BigNumberish };
        strikePrice: { rawValue: BigNumberish };
        assetPrice: { rawValue: BigNumberish };
      },
      poolAddress: string,
      nTokens: { rawValue: BigNumberish },
      deposit: { rawValue: BigNumberish },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    revitalisePotion(
      potionAddress: string,
      poolAddress: string,
      nTokens: { rawValue: BigNumberish },
      assetPrice: { rawValue: BigNumberish },
      dvmBond: { rawValue: BigNumberish },
      finalDeposit: { rawValue: BigNumberish },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawPotion(
      revitalID: BigNumberish,
      potionAddress: string,
      poolAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * **************************************         FRONTEND DATA FUNCTIONS           ****************************************
     */
    getPotionData(
      potionAddrs: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * **************************************         FACTORY DATA FUNCTIONS           ****************************************
     */
    getContractAddressList(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * **************************************         BUYER DATA FUNCTIONS           ****************************************
     */
    getBuyerPotions(
      buyer: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBuyerRevitalPots(
      buyer: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * **************************************         REVITAL DATA FUNCTIONS           ****************************************
     */
    getRevitalID(
      potionAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    STRICT_LIQUIDATION_LIVENESS(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    STRICT_WITHDRAWAL_LIVENESS(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    buyerPotions(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    buyerRevitalPots(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    collateralCurrency(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    collateralTokenWhitelist(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    contractsAddress(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    dataBook(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Gets the current time. Will return the last time set in `setCurrentTime` if running in test mode. Otherwise, it will return the block timestamp.
     */
    getCurrentTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mintedDeposit(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mintedPrice(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    revitalBook(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Will revert if not running in test mode.
     * Sets the current time.
     * @param time timestamp to set current Testable time to.
     */
    setCurrentTime(
      time: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    timerAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenFactoryAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    validExpirationTimestamps(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    writeMintPotion(
      params: {
        expirationTimestamp: BigNumberish;
        collateralAddress: string;
        priceFeedIdentifier: string;
        assetClass: string;
        syntheticName: string;
        syntheticSymbol: string;
        collateralRequirement: { rawValue: BigNumberish };
        disputeBondPct: { rawValue: BigNumberish };
        sponsorDisputeRewardPct: { rawValue: BigNumberish };
        disputerDisputeRewardPct: { rawValue: BigNumberish };
        strikePrice: { rawValue: BigNumberish };
        assetPrice: { rawValue: BigNumberish };
      },
      poolAddress: string,
      nTokens: { rawValue: BigNumberish },
      deposit: { rawValue: BigNumberish },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    revitalisePotion(
      potionAddress: string,
      poolAddress: string,
      nTokens: { rawValue: BigNumberish },
      assetPrice: { rawValue: BigNumberish },
      dvmBond: { rawValue: BigNumberish },
      finalDeposit: { rawValue: BigNumberish },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawPotion(
      revitalID: BigNumberish,
      potionAddress: string,
      poolAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * **************************************         FRONTEND DATA FUNCTIONS           ****************************************
     */
    getPotionData(
      potionAddrs: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * **************************************         FACTORY DATA FUNCTIONS           ****************************************
     */
    getContractAddressList(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * **************************************         BUYER DATA FUNCTIONS           ****************************************
     */
    getBuyerPotions(
      buyer: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBuyerRevitalPots(
      buyer: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * **************************************         REVITAL DATA FUNCTIONS           ****************************************
     */
    getRevitalID(
      potionAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}

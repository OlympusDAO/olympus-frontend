/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface OlympusTreasuryInterface extends ethers.utils.Interface {
  functions: {
    "LiquidityDepositorQueue(address)": FunctionFragment;
    "LiquidityManagerQueue(address)": FunctionFragment;
    "LiquidityTokenQueue(address)": FunctionFragment;
    "OHM()": FunctionFragment;
    "ReserveManagerQueue(address)": FunctionFragment;
    "auditReserves()": FunctionFragment;
    "blocksNeededForQueue()": FunctionFragment;
    "bondCalculator(address)": FunctionFragment;
    "debtorBalance(address)": FunctionFragment;
    "debtorQueue(address)": FunctionFragment;
    "debtors(uint256)": FunctionFragment;
    "deposit(uint256,address,uint256)": FunctionFragment;
    "excessReserves()": FunctionFragment;
    "incurDebt(uint256,address)": FunctionFragment;
    "isDebtor(address)": FunctionFragment;
    "isLiquidityDepositor(address)": FunctionFragment;
    "isLiquidityManager(address)": FunctionFragment;
    "isLiquidityToken(address)": FunctionFragment;
    "isReserveDepositor(address)": FunctionFragment;
    "isReserveManager(address)": FunctionFragment;
    "isReserveSpender(address)": FunctionFragment;
    "isReserveToken(address)": FunctionFragment;
    "isRewardManager(address)": FunctionFragment;
    "liquidityDepositors(uint256)": FunctionFragment;
    "liquidityManagers(uint256)": FunctionFragment;
    "liquidityTokens(uint256)": FunctionFragment;
    "manage(address,uint256)": FunctionFragment;
    "manager()": FunctionFragment;
    "mintRewards(address,uint256)": FunctionFragment;
    "pullManagement()": FunctionFragment;
    "pushManagement(address)": FunctionFragment;
    "queue(uint8,address)": FunctionFragment;
    "renounceManagement()": FunctionFragment;
    "repayDebtWithOHM(uint256)": FunctionFragment;
    "repayDebtWithReserve(uint256,address)": FunctionFragment;
    "reserveDepositorQueue(address)": FunctionFragment;
    "reserveDepositors(uint256)": FunctionFragment;
    "reserveManagers(uint256)": FunctionFragment;
    "reserveSpenderQueue(address)": FunctionFragment;
    "reserveSpenders(uint256)": FunctionFragment;
    "reserveTokenQueue(address)": FunctionFragment;
    "reserveTokens(uint256)": FunctionFragment;
    "rewardManagerQueue(address)": FunctionFragment;
    "rewardManagers(uint256)": FunctionFragment;
    "sOHM()": FunctionFragment;
    "sOHMQueue()": FunctionFragment;
    "toggle(uint8,address,address)": FunctionFragment;
    "totalDebt()": FunctionFragment;
    "totalReserves()": FunctionFragment;
    "valueOf(address,uint256)": FunctionFragment;
    "withdraw(uint256,address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "LiquidityDepositorQueue",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "LiquidityManagerQueue",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "LiquidityTokenQueue",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "OHM", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ReserveManagerQueue",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "auditReserves",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "blocksNeededForQueue",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "bondCalculator",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "debtorBalance",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "debtorQueue", values: [string]): string;
  encodeFunctionData(
    functionFragment: "debtors",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "excessReserves",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "incurDebt",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(functionFragment: "isDebtor", values: [string]): string;
  encodeFunctionData(
    functionFragment: "isLiquidityDepositor",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isLiquidityManager",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isLiquidityToken",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isReserveDepositor",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isReserveManager",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isReserveSpender",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isReserveToken",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isRewardManager",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "liquidityDepositors",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "liquidityManagers",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "liquidityTokens",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "manage",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "manager", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "mintRewards",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "pullManagement",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "pushManagement",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "queue",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceManagement",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "repayDebtWithOHM",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "repayDebtWithReserve",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "reserveDepositorQueue",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "reserveDepositors",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "reserveManagers",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "reserveSpenderQueue",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "reserveSpenders",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "reserveTokenQueue",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "reserveTokens",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "rewardManagerQueue",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "rewardManagers",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "sOHM", values?: undefined): string;
  encodeFunctionData(functionFragment: "sOHMQueue", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "toggle",
    values: [BigNumberish, string, string]
  ): string;
  encodeFunctionData(functionFragment: "totalDebt", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalReserves",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "valueOf",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish, string]
  ): string;

  decodeFunctionResult(
    functionFragment: "LiquidityDepositorQueue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "LiquidityManagerQueue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "LiquidityTokenQueue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "OHM", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "ReserveManagerQueue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "auditReserves",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "blocksNeededForQueue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bondCalculator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "debtorBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "debtorQueue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "debtors", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "excessReserves",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "incurDebt", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isDebtor", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isLiquidityDepositor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isLiquidityManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isLiquidityToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isReserveDepositor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isReserveManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isReserveSpender",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isReserveToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isRewardManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "liquidityDepositors",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "liquidityManagers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "liquidityTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "manage", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "manager", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "mintRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pullManagement",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pushManagement",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "queue", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceManagement",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "repayDebtWithOHM",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "repayDebtWithReserve",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reserveDepositorQueue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reserveDepositors",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reserveManagers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reserveSpenderQueue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reserveSpenders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reserveTokenQueue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reserveTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardManagerQueue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardManagers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "sOHM", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "sOHMQueue", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "toggle", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "totalDebt", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalReserves",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "valueOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "ChangeActivated(uint8,address,bool)": EventFragment;
    "ChangeQueued(uint8,address)": EventFragment;
    "CreateDebt(address,address,uint256,uint256)": EventFragment;
    "Deposit(address,uint256,uint256)": EventFragment;
    "OwnershipPulled(address,address)": EventFragment;
    "OwnershipPushed(address,address)": EventFragment;
    "RepayDebt(address,address,uint256,uint256)": EventFragment;
    "ReservesAudited(uint256)": EventFragment;
    "ReservesManaged(address,uint256)": EventFragment;
    "ReservesUpdated(uint256)": EventFragment;
    "RewardsMinted(address,address,uint256)": EventFragment;
    "Withdrawal(address,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ChangeActivated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ChangeQueued"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CreateDebt"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Deposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipPulled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipPushed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RepayDebt"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ReservesAudited"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ReservesManaged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ReservesUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardsMinted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdrawal"): EventFragment;
}

export class OlympusTreasury extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: OlympusTreasuryInterface;

  functions: {
    LiquidityDepositorQueue(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    LiquidityManagerQueue(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    LiquidityTokenQueue(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    OHM(overrides?: CallOverrides): Promise<[string]>;

    ReserveManagerQueue(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    auditReserves(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    blocksNeededForQueue(overrides?: CallOverrides): Promise<[BigNumber]>;

    bondCalculator(arg0: string, overrides?: CallOverrides): Promise<[string]>;

    debtorBalance(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    debtorQueue(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    debtors(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    deposit(
      _amount: BigNumberish,
      _token: string,
      _profit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    excessReserves(overrides?: CallOverrides): Promise<[BigNumber]>;

    incurDebt(
      _amount: BigNumberish,
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isDebtor(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    isLiquidityDepositor(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isLiquidityManager(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isLiquidityToken(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isReserveDepositor(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isReserveManager(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isReserveSpender(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isReserveToken(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    isRewardManager(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    liquidityDepositors(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    liquidityManagers(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    liquidityTokens(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    manage(
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    manager(overrides?: CallOverrides): Promise<[string]>;

    mintRewards(
      _recipient: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    pullManagement(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    pushManagement(
      newOwner_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    queue(
      _managing: BigNumberish,
      _address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceManagement(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    repayDebtWithOHM(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    repayDebtWithReserve(
      _amount: BigNumberish,
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    reserveDepositorQueue(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    reserveDepositors(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    reserveManagers(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    reserveSpenderQueue(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    reserveSpenders(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    reserveTokenQueue(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    reserveTokens(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    rewardManagerQueue(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    rewardManagers(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    sOHM(overrides?: CallOverrides): Promise<[string]>;

    sOHMQueue(overrides?: CallOverrides): Promise<[BigNumber]>;

    toggle(
      _managing: BigNumberish,
      _address: string,
      _calculator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    totalDebt(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalReserves(overrides?: CallOverrides): Promise<[BigNumber]>;

    valueOf(
      _token: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { value_: BigNumber }>;

    withdraw(
      _amount: BigNumberish,
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  LiquidityDepositorQueue(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  LiquidityManagerQueue(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  LiquidityTokenQueue(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  OHM(overrides?: CallOverrides): Promise<string>;

  ReserveManagerQueue(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  auditReserves(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  blocksNeededForQueue(overrides?: CallOverrides): Promise<BigNumber>;

  bondCalculator(arg0: string, overrides?: CallOverrides): Promise<string>;

  debtorBalance(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  debtorQueue(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  debtors(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  deposit(
    _amount: BigNumberish,
    _token: string,
    _profit: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  excessReserves(overrides?: CallOverrides): Promise<BigNumber>;

  incurDebt(
    _amount: BigNumberish,
    _token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isDebtor(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  isLiquidityDepositor(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isLiquidityManager(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  isLiquidityToken(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  isReserveDepositor(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  isReserveManager(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  isReserveSpender(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  isReserveToken(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  isRewardManager(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  liquidityDepositors(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  liquidityManagers(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  liquidityTokens(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  manage(
    _token: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  manager(overrides?: CallOverrides): Promise<string>;

  mintRewards(
    _recipient: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  pullManagement(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  pushManagement(
    newOwner_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  queue(
    _managing: BigNumberish,
    _address: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceManagement(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  repayDebtWithOHM(
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  repayDebtWithReserve(
    _amount: BigNumberish,
    _token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  reserveDepositorQueue(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  reserveDepositors(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  reserveManagers(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  reserveSpenderQueue(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  reserveSpenders(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  reserveTokenQueue(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  reserveTokens(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  rewardManagerQueue(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  rewardManagers(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  sOHM(overrides?: CallOverrides): Promise<string>;

  sOHMQueue(overrides?: CallOverrides): Promise<BigNumber>;

  toggle(
    _managing: BigNumberish,
    _address: string,
    _calculator: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  totalDebt(overrides?: CallOverrides): Promise<BigNumber>;

  totalReserves(overrides?: CallOverrides): Promise<BigNumber>;

  valueOf(
    _token: string,
    _amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  withdraw(
    _amount: BigNumberish,
    _token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    LiquidityDepositorQueue(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    LiquidityManagerQueue(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    LiquidityTokenQueue(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    OHM(overrides?: CallOverrides): Promise<string>;

    ReserveManagerQueue(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    auditReserves(overrides?: CallOverrides): Promise<void>;

    blocksNeededForQueue(overrides?: CallOverrides): Promise<BigNumber>;

    bondCalculator(arg0: string, overrides?: CallOverrides): Promise<string>;

    debtorBalance(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    debtorQueue(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    debtors(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    deposit(
      _amount: BigNumberish,
      _token: string,
      _profit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    excessReserves(overrides?: CallOverrides): Promise<BigNumber>;

    incurDebt(
      _amount: BigNumberish,
      _token: string,
      overrides?: CallOverrides
    ): Promise<void>;

    isDebtor(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    isLiquidityDepositor(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isLiquidityManager(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isLiquidityToken(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    isReserveDepositor(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isReserveManager(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    isReserveSpender(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    isReserveToken(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    isRewardManager(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    liquidityDepositors(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    liquidityManagers(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    liquidityTokens(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    manage(
      _token: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    manager(overrides?: CallOverrides): Promise<string>;

    mintRewards(
      _recipient: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    pullManagement(overrides?: CallOverrides): Promise<void>;

    pushManagement(newOwner_: string, overrides?: CallOverrides): Promise<void>;

    queue(
      _managing: BigNumberish,
      _address: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    renounceManagement(overrides?: CallOverrides): Promise<void>;

    repayDebtWithOHM(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    repayDebtWithReserve(
      _amount: BigNumberish,
      _token: string,
      overrides?: CallOverrides
    ): Promise<void>;

    reserveDepositorQueue(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    reserveDepositors(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    reserveManagers(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    reserveSpenderQueue(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    reserveSpenders(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    reserveTokenQueue(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    reserveTokens(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    rewardManagerQueue(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rewardManagers(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    sOHM(overrides?: CallOverrides): Promise<string>;

    sOHMQueue(overrides?: CallOverrides): Promise<BigNumber>;

    toggle(
      _managing: BigNumberish,
      _address: string,
      _calculator: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    totalDebt(overrides?: CallOverrides): Promise<BigNumber>;

    totalReserves(overrides?: CallOverrides): Promise<BigNumber>;

    valueOf(
      _token: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdraw(
      _amount: BigNumberish,
      _token: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    ChangeActivated(
      managing?: BigNumberish | null,
      activated?: null,
      result?: null
    ): TypedEventFilter<
      [number, string, boolean],
      { managing: number; activated: string; result: boolean }
    >;

    ChangeQueued(
      managing?: BigNumberish | null,
      queued?: null
    ): TypedEventFilter<[number, string], { managing: number; queued: string }>;

    CreateDebt(
      debtor?: string | null,
      token?: string | null,
      amount?: null,
      value?: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber],
      { debtor: string; token: string; amount: BigNumber; value: BigNumber }
    >;

    Deposit(
      token?: string | null,
      amount?: null,
      value?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { token: string; amount: BigNumber; value: BigNumber }
    >;

    OwnershipPulled(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnershipPushed(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    RepayDebt(
      debtor?: string | null,
      token?: string | null,
      amount?: null,
      value?: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber],
      { debtor: string; token: string; amount: BigNumber; value: BigNumber }
    >;

    ReservesAudited(
      totalReserves?: BigNumberish | null
    ): TypedEventFilter<[BigNumber], { totalReserves: BigNumber }>;

    ReservesManaged(
      token?: string | null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { token: string; amount: BigNumber }
    >;

    ReservesUpdated(
      totalReserves?: BigNumberish | null
    ): TypedEventFilter<[BigNumber], { totalReserves: BigNumber }>;

    RewardsMinted(
      caller?: string | null,
      recipient?: string | null,
      amount?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { caller: string; recipient: string; amount: BigNumber }
    >;

    Withdrawal(
      token?: string | null,
      amount?: null,
      value?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { token: string; amount: BigNumber; value: BigNumber }
    >;
  };

  estimateGas: {
    LiquidityDepositorQueue(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    LiquidityManagerQueue(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    LiquidityTokenQueue(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    OHM(overrides?: CallOverrides): Promise<BigNumber>;

    ReserveManagerQueue(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    auditReserves(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    blocksNeededForQueue(overrides?: CallOverrides): Promise<BigNumber>;

    bondCalculator(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    debtorBalance(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    debtorQueue(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    debtors(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    deposit(
      _amount: BigNumberish,
      _token: string,
      _profit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    excessReserves(overrides?: CallOverrides): Promise<BigNumber>;

    incurDebt(
      _amount: BigNumberish,
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isDebtor(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    isLiquidityDepositor(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isLiquidityManager(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isLiquidityToken(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isReserveDepositor(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isReserveManager(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isReserveSpender(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isReserveToken(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    isRewardManager(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    liquidityDepositors(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    liquidityManagers(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    liquidityTokens(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    manage(
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    manager(overrides?: CallOverrides): Promise<BigNumber>;

    mintRewards(
      _recipient: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    pullManagement(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    pushManagement(
      newOwner_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    queue(
      _managing: BigNumberish,
      _address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceManagement(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    repayDebtWithOHM(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    repayDebtWithReserve(
      _amount: BigNumberish,
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    reserveDepositorQueue(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    reserveDepositors(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    reserveManagers(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    reserveSpenderQueue(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    reserveSpenders(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    reserveTokenQueue(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    reserveTokens(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rewardManagerQueue(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rewardManagers(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    sOHM(overrides?: CallOverrides): Promise<BigNumber>;

    sOHMQueue(overrides?: CallOverrides): Promise<BigNumber>;

    toggle(
      _managing: BigNumberish,
      _address: string,
      _calculator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    totalDebt(overrides?: CallOverrides): Promise<BigNumber>;

    totalReserves(overrides?: CallOverrides): Promise<BigNumber>;

    valueOf(
      _token: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdraw(
      _amount: BigNumberish,
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    LiquidityDepositorQueue(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    LiquidityManagerQueue(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    LiquidityTokenQueue(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    OHM(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ReserveManagerQueue(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    auditReserves(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    blocksNeededForQueue(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    bondCalculator(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    debtorBalance(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    debtorQueue(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    debtors(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    deposit(
      _amount: BigNumberish,
      _token: string,
      _profit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    excessReserves(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    incurDebt(
      _amount: BigNumberish,
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isDebtor(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isLiquidityDepositor(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isLiquidityManager(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isLiquidityToken(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isReserveDepositor(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isReserveManager(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isReserveSpender(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isReserveToken(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isRewardManager(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    liquidityDepositors(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    liquidityManagers(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    liquidityTokens(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    manage(
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    manager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mintRewards(
      _recipient: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    pullManagement(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    pushManagement(
      newOwner_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    queue(
      _managing: BigNumberish,
      _address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceManagement(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    repayDebtWithOHM(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    repayDebtWithReserve(
      _amount: BigNumberish,
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    reserveDepositorQueue(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    reserveDepositors(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    reserveManagers(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    reserveSpenderQueue(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    reserveSpenders(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    reserveTokenQueue(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    reserveTokens(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rewardManagerQueue(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rewardManagers(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    sOHM(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    sOHMQueue(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    toggle(
      _managing: BigNumberish,
      _address: string,
      _calculator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    totalDebt(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalReserves(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    valueOf(
      _token: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdraw(
      _amount: BigNumberish,
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}

{
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract Kernel",
          "name": "kernel_",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "ohm",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "pairToken",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "aura",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "bal",
              "type": "address"
            }
          ],
          "internalType": "struct IBLVaultManagerLido.TokenData",
          "name": "tokenData_",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "vault",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "liquidityPool",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "balancerHelper",
              "type": "address"
            }
          ],
          "internalType": "struct IBLVaultManagerLido.BalancerData",
          "name": "balancerData_",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "pid",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "auraBooster",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "auraRewardPool",
              "type": "address"
            }
          ],
          "internalType": "struct IBLVaultManagerLido.AuraData",
          "name": "auraData_",
          "type": "tuple"
        },
        {
          "internalType": "address",
          "name": "auraMiningLib_",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "contract AggregatorV3Interface",
              "name": "feed",
              "type": "address"
            },
            {
              "internalType": "uint48",
              "name": "updateThreshold",
              "type": "uint48"
            }
          ],
          "internalType": "struct IBLVaultManagerLido.OracleFeed",
          "name": "ohmEthPriceFeed_",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "contract AggregatorV3Interface",
              "name": "feed",
              "type": "address"
            },
            {
              "internalType": "uint48",
              "name": "updateThreshold",
              "type": "uint48"
            }
          ],
          "internalType": "struct IBLVaultManagerLido.OracleFeed",
          "name": "stethEthPriceFeed_",
          "type": "tuple"
        },
        {
          "internalType": "address",
          "name": "implementation_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "ohmLimit_",
          "type": "uint256"
        },
        {
          "internalType": "uint64",
          "name": "fee_",
          "type": "uint64"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "BLManagerLido_BadPriceFeed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BLManagerLido_Inactive",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BLManagerLido_InvalidFee",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BLManagerLido_InvalidLimit",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BLManagerLido_InvalidLpAmount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BLManagerLido_InvalidVault",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BLManagerLido_LimitViolation",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BLManagerLido_VaultAlreadyExists",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CreateFail",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "caller_",
          "type": "address"
        }
      ],
      "name": "KernelAdapter_OnlyKernel",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "Keycode",
          "name": "keycode_",
          "type": "bytes5"
        }
      ],
      "name": "Policy_ModuleDoesNotExist",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "vault",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "fee",
          "type": "uint64"
        }
      ],
      "name": "VaultDeployed",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "BLREG",
      "outputs": [
        {
          "internalType": "contract BLREGv1",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_FEE",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MINTR",
      "outputs": [
        {
          "internalType": "contract MINTRv1",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ROLES",
      "outputs": [
        {
          "internalType": "contract ROLESv1",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "TRSRY",
      "outputs": [
        {
          "internalType": "contract TRSRYv1",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "activate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "aura",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "auraData",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "auraBooster",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "auraRewardPool",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "auraMiningLib",
      "outputs": [
        {
          "internalType": "contract IAuraMiningLib",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bal",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "balancerData",
      "outputs": [
        {
          "internalType": "address",
          "name": "vault",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "liquidityPool",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "balancerHelper",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount_",
          "type": "uint256"
        }
      ],
      "name": "burnOhmFromVault",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract Kernel",
          "name": "newKernel_",
          "type": "address"
        }
      ],
      "name": "changeKernel",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint48",
          "name": "ohmEthUpdateThreshold_",
          "type": "uint48"
        },
        {
          "internalType": "uint48",
          "name": "stethEthUpdateThreshold_",
          "type": "uint48"
        }
      ],
      "name": "changeUpdateThresholds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "circulatingOhmBurned",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "configureDependencies",
      "outputs": [
        {
          "internalType": "Keycode[]",
          "name": "dependencies",
          "type": "bytes5[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "currentFee",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "deactivate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount_",
          "type": "uint256"
        }
      ],
      "name": "decreaseTotalLp",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "deployVault",
      "outputs": [
        {
          "internalType": "address",
          "name": "vault",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "deployedOhm",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "exchangeName",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount_",
          "type": "uint256"
        }
      ],
      "name": "getExpectedLpAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "bptAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user_",
          "type": "address"
        }
      ],
      "name": "getLpBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMaxDeposit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOhmSupplyChangeData",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "poolOhmShare",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deployedOhm",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "circulatingOhmBurned",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOhmTknPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user_",
          "type": "address"
        }
      ],
      "name": "getOutstandingRewards",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "rewardToken",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "outstandingRewards",
              "type": "uint256"
            }
          ],
          "internalType": "struct RewardsData[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPoolOhmShare",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "rewardToken_",
          "type": "address"
        }
      ],
      "name": "getRewardRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "rewardRate",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRewardTokens",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTknOhmPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user_",
          "type": "address"
        }
      ],
      "name": "getUserPairShare",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "implementation",
      "outputs": [
        {
          "internalType": "contract BLVaultLido",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount_",
          "type": "uint256"
        }
      ],
      "name": "increaseTotalLp",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isActive",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isLidoBLVaultActive",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "kernel",
      "outputs": [
        {
          "internalType": "contract Kernel",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount_",
          "type": "uint256"
        }
      ],
      "name": "mintOhmToVault",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ohm",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ohmEthPriceFeed",
      "outputs": [
        {
          "internalType": "contract AggregatorV3Interface",
          "name": "feed",
          "type": "address"
        },
        {
          "internalType": "uint48",
          "name": "updateThreshold",
          "type": "uint48"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ohmLimit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pairToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "requestPermissions",
      "outputs": [
        {
          "components": [
            {
              "internalType": "Keycode",
              "name": "keycode",
              "type": "bytes5"
            },
            {
              "internalType": "bytes4",
              "name": "funcSelector",
              "type": "bytes4"
            }
          ],
          "internalType": "struct Permissions[]",
          "name": "permissions",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "newFee_",
          "type": "uint64"
        }
      ],
      "name": "setFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newLimit_",
          "type": "uint256"
        }
      ],
      "name": "setLimit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stethEthPriceFeed",
      "outputs": [
        {
          "internalType": "contract AggregatorV3Interface",
          "name": "feed",
          "type": "address"
        },
        {
          "internalType": "uint48",
          "name": "updateThreshold",
          "type": "uint48"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalLp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userVaults",
      "outputs": [
        {
          "internalType": "contract BLVaultLido",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract BLVaultLido",
          "name": "",
          "type": "address"
        }
      ],
      "name": "vaultOwners",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "devdoc": {
    "kind": "dev",
    "methods": {
      "activate()": {
        "details": "Can only be called by the admin"
      },
      "burnOhmFromVault(uint256)": {
        "details": "Can only be called by an approved vault. The caller must have an OHM approval for the MINTR.",
        "params": {
          "amount_": "The amount of OHM to burn"
        }
      },
      "changeUpdateThresholds(uint48,uint48)": {
        "details": "Can only be called by the admin",
        "params": {
          "ohmEthUpdateThreshold_": "The new time threshold for the OHM-ETH oracle",
          "stethEthUpdateThreshold_": "The new time threshold for the stETH-ETH oracle"
        }
      },
      "configureDependencies()": {
        "returns": {
          "dependencies": "- Keycode array of module dependencies."
        }
      },
      "deactivate()": {
        "details": "Can only be called by the admin"
      },
      "decreaseTotalLp(uint256)": {
        "details": "Can only be called by an approved vault",
        "params": {
          "amount_": "The amount of LP tokens to remove from the total"
        }
      },
      "deployVault()": {
        "details": "The vault is deployed with the user as the owner",
        "returns": {
          "vault": "                  The address of the deployed vault"
        }
      },
      "getExpectedLpAmount(uint256)": {
        "details": "This is an external function but should only be used in a callstatic from an external         source like the frontend.",
        "params": {
          "amount_": "The amount of wstETH to calculate the LP tokens for"
        },
        "returns": {
          "bptAmount": "uint256                 The amount of LP tokens that will be generated"
        }
      },
      "getLpBalance(address)": {
        "params": {
          "user_": "The user to check the vault of"
        },
        "returns": {
          "_0": "uint256                 The user's vault's LP balance"
        }
      },
      "getMaxDeposit()": {
        "returns": {
          "_0": "uint256                 The max wstETH deposit"
        }
      },
      "getOhmSupplyChangeData()": {
        "returns": {
          "circulatingOhmBurned": "uint256                 OHM that wasn't minted, but was previously circulating that has been burned by the system",
          "deployedOhm": "uint256                 Current amount of OHM minted by the system into the Balancer pool",
          "poolOhmShare": "uint256                 Vault system's current claim on OHM from the Balancer pool"
        }
      },
      "getOhmTknPrice()": {
        "returns": {
          "_0": "uint256                 OHM per 1 wstETH (9 decimals)"
        }
      },
      "getOutstandingRewards(address)": {
        "params": {
          "user_": "The user to check the vault of"
        },
        "returns": {
          "_0": "RewardsData[]           The user's vault's unclaimed rewards in Aura"
        }
      },
      "getPoolOhmShare()": {
        "returns": {
          "_0": "uint256                 The amount of OHM in the pool that is owned by this vault system."
        }
      },
      "getRewardRate(address)": {
        "returns": {
          "rewardRate": "uint256                 The reward rate (tokens per second)"
        }
      },
      "getRewardTokens()": {
        "returns": {
          "_0": "address[]               The addresses of the reward tokens"
        }
      },
      "getTknOhmPrice()": {
        "returns": {
          "_0": "uint256                 wstETH per 1 OHM (18 decimals)"
        }
      },
      "getUserPairShare(address)": {
        "params": {
          "user_": "The user to check the vault of"
        },
        "returns": {
          "_0": "uint256                 The user's vault's claim on wstETH"
        }
      },
      "increaseTotalLp(uint256)": {
        "details": "Can only be called by an approved vault",
        "params": {
          "amount_": "The amount of LP tokens to add to the total"
        }
      },
      "mintOhmToVault(uint256)": {
        "details": "Can only be called by an approved vault",
        "params": {
          "amount_": "The amount of OHM to mint"
        }
      },
      "requestPermissions()": {
        "returns": {
          "permissions": "- Array of keycodes and function selectors for requested permissions."
        }
      },
      "setFee(uint64)": {
        "details": "Can only be called by the admin. Cannot be set beyond 10_000 (100%). Only is used by vaults deployed after the update.",
        "params": {
          "newFee_": "The new fee (in basis points)"
        }
      },
      "setLimit(uint256)": {
        "details": "Can only be called by the admin. Cannot be set lower than the current outstanding minted OHM.",
        "params": {
          "newLimit_": "The new OHM limit (9 decimals)"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "activate()": {
        "notice": "Activates the vault manager and all approved vaults"
      },
      "burnOhmFromVault(uint256)": {
        "notice": "Burns OHM from the caller"
      },
      "changeKernel(address)": {
        "notice": "Function used by kernel when migrating to a new kernel."
      },
      "changeUpdateThresholds(uint48,uint48)": {
        "notice": "Updates the time threshold for oracle staleness checks"
      },
      "configureDependencies()": {
        "notice": "Define module dependencies for this policy."
      },
      "deactivate()": {
        "notice": "Deactivates the vault manager and all approved vaults"
      },
      "decreaseTotalLp(uint256)": {
        "notice": "Decreases the tracked value for totalLP"
      },
      "deployVault()": {
        "notice": "Deploys a personal single sided vault for the user"
      },
      "getExpectedLpAmount(uint256)": {
        "notice": "Calculates the amount of LP tokens that will be generated for a given amount of wstETH"
      },
      "getLpBalance(address)": {
        "notice": "Returns the user's vault's LP balance"
      },
      "getMaxDeposit()": {
        "notice": "Calculates the max wstETH deposit based on the limit and current amount of OHM minted"
      },
      "getOhmSupplyChangeData()": {
        "notice": "Gets the net OHM emitted or removed by the system since inception"
      },
      "getOhmTknPrice()": {
        "notice": "Gets the number of OHM per 1 wstETH"
      },
      "getOutstandingRewards(address)": {
        "notice": "Returns the user's vault's unclaimed rewards in Aura"
      },
      "getPoolOhmShare()": {
        "notice": "Returns the amount of OHM in the pool that is owned by this vault system."
      },
      "getRewardRate(address)": {
        "notice": "Gets the reward rate (tokens per second) of the passed reward token"
      },
      "getRewardTokens()": {
        "notice": "Gets all the reward tokens from the Aura pool"
      },
      "getTknOhmPrice()": {
        "notice": "Gets the number of wstETH per 1 OHM"
      },
      "getUserPairShare(address)": {
        "notice": "Returns the user's vault's claim on wstETH"
      },
      "increaseTotalLp(uint256)": {
        "notice": "Increases the tracked value for totalLP"
      },
      "isActive()": {
        "notice": "Easily accessible indicator for if a policy is activated or not."
      },
      "mintOhmToVault(uint256)": {
        "notice": "Mints OHM to the caller"
      },
      "requestPermissions()": {
        "notice": "Function called by kernel to set module function permissions."
      },
      "setFee(uint64)": {
        "notice": "Updates the fee on reward tokens"
      },
      "setLimit(uint256)": {
        "notice": "Updates the limit on minting OHM"
      }
    },
    "version": 1
  }
}
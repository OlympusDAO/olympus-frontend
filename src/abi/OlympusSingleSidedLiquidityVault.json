{
  "abi": [
    {
      "inputs": [
        { "internalType": "contract Kernel", "name": "kernel_", "type": "address" },
        { "internalType": "address", "name": "ohm_", "type": "address" },
        { "internalType": "address", "name": "steth_", "type": "address" },
        { "internalType": "address", "name": "vault_", "type": "address" },
        { "internalType": "address", "name": "liquidityPool_", "type": "address" },
        {
          "components": [
            { "internalType": "contract AggregatorV3Interface", "name": "feed", "type": "address" },
            { "internalType": "uint48", "name": "updateThreshold", "type": "uint48" }
          ],
          "internalType": "struct StethLiquidityVault.OracleFeed",
          "name": "ohmEthPriceFeed_",
          "type": "tuple"
        },
        {
          "components": [
            { "internalType": "contract AggregatorV3Interface", "name": "feed", "type": "address" },
            { "internalType": "uint48", "name": "updateThreshold", "type": "uint48" }
          ],
          "internalType": "struct StethLiquidityVault.OracleFeed",
          "name": "ethUsdPriceFeed_",
          "type": "tuple"
        },
        {
          "components": [
            { "internalType": "contract AggregatorV3Interface", "name": "feed", "type": "address" },
            { "internalType": "uint48", "name": "updateThreshold", "type": "uint48" }
          ],
          "internalType": "struct StethLiquidityVault.OracleFeed",
          "name": "stethUsdPriceFeed_",
          "type": "tuple"
        },
        {
          "components": [
            { "internalType": "uint256", "name": "pid", "type": "uint256" },
            { "internalType": "contract IAuraBooster", "name": "booster", "type": "address" },
            { "internalType": "contract IAuraRewardPool", "name": "rewardsPool", "type": "address" }
          ],
          "internalType": "struct StethLiquidityVault.AuraPool",
          "name": "auraPool_",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [{ "internalType": "address", "name": "caller_", "type": "address" }],
      "name": "KernelAdapter_OnlyKernel",
      "type": "error"
    },
    { "inputs": [], "name": "LiquidityVault_BadPriceFeed", "type": "error" },
    { "inputs": [], "name": "LiquidityVault_InvalidRemoval", "type": "error" },
    { "inputs": [], "name": "LiquidityVault_LimitViolation", "type": "error" },
    { "inputs": [], "name": "LiquidityVault_PoolImbalanced", "type": "error" },
    {
      "inputs": [{ "internalType": "Keycode", "name": "keycode_", "type": "bytes5" }],
      "name": "Policy_ModuleDoesNotExist",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        { "indexed": true, "internalType": "address", "name": "user", "type": "address" },
        { "indexed": false, "internalType": "uint256", "name": "pairAmount", "type": "uint256" },
        { "indexed": false, "internalType": "uint256", "name": "ohmMinted", "type": "uint256" }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        { "indexed": true, "internalType": "address", "name": "user", "type": "address" },
        { "indexed": true, "internalType": "address", "name": "token", "type": "address" },
        { "indexed": false, "internalType": "uint256", "name": "amount", "type": "uint256" }
      ],
      "name": "RewardsClaimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        { "indexed": true, "internalType": "address", "name": "user", "type": "address" },
        { "indexed": false, "internalType": "uint256", "name": "pairAmount", "type": "uint256" },
        { "indexed": false, "internalType": "uint256", "name": "ohmBurned", "type": "uint256" }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "EXCHANGE",
      "outputs": [{ "internalType": "string", "name": "", "type": "string" }],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "FEE",
      "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "LIMIT",
      "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "LQREG",
      "outputs": [{ "internalType": "contract LQREGv1", "name": "", "type": "address" }],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MINTR",
      "outputs": [{ "internalType": "contract MINTRv1", "name": "", "type": "address" }],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PRECISION",
      "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ROLES",
      "outputs": [{ "internalType": "contract ROLESv1", "name": "", "type": "address" }],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "THRESHOLD",
      "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [{ "internalType": "address", "name": "", "type": "address" }],
      "name": "accumulatedFees",
      "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }],
      "stateMutability": "view",
      "type": "function"
    },
    { "inputs": [], "name": "activate", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    {
      "inputs": [{ "internalType": "address", "name": "token_", "type": "address" }],
      "name": "addExternalRewardToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        { "internalType": "address", "name": "token_", "type": "address" },
        { "internalType": "uint256", "name": "rewardsPerSecond_", "type": "uint256" },
        { "internalType": "uint256", "name": "startTimestamp_", "type": "uint256" }
      ],
      "name": "addInternalRewardToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "auraPool",
      "outputs": [
        { "internalType": "uint256", "name": "pid", "type": "uint256" },
        { "internalType": "contract IAuraBooster", "name": "booster", "type": "address" },
        { "internalType": "contract IAuraRewardPool", "name": "rewardsPool", "type": "address" }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [{ "internalType": "contract Kernel", "name": "newKernel_", "type": "address" }],
      "name": "changeKernel",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        { "internalType": "uint48", "name": "ohmEthPriceFeedUpdateThreshold_", "type": "uint48" },
        { "internalType": "uint48", "name": "ethUsdPriceFeedUpdateThreshold_", "type": "uint48" },
        { "internalType": "uint48", "name": "stethUsdPriceFeedUpdateThreshold_", "type": "uint48" }
      ],
      "name": "changeUpdateThresholds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    { "inputs": [], "name": "claimFees", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [], "name": "claimRewards", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    {
      "inputs": [],
      "name": "configureDependencies",
      "outputs": [{ "internalType": "Keycode[]", "name": "dependencies", "type": "bytes5[]" }],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [{ "internalType": "uint256", "name": "id_", "type": "uint256" }],
      "name": "deactivate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        { "internalType": "uint256", "name": "amount_", "type": "uint256" },
        { "internalType": "uint256", "name": "slippageParam_", "type": "uint256" }
      ],
      "name": "deposit",
      "outputs": [{ "internalType": "uint256", "name": "lpAmountOut", "type": "uint256" }],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ethUsdPriceFeed",
      "outputs": [
        { "internalType": "contract AggregatorV3Interface", "name": "feed", "type": "address" },
        { "internalType": "uint48", "name": "updateThreshold", "type": "uint48" }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }],
      "name": "externalRewardTokens",
      "outputs": [
        { "internalType": "address", "name": "token", "type": "address" },
        { "internalType": "uint256", "name": "accumulatedRewardsPerShare", "type": "uint256" }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        { "internalType": "uint256", "name": "id_", "type": "uint256" },
        { "internalType": "address", "name": "user_", "type": "address" }
      ],
      "name": "externalRewardsForToken",
      "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getExternalRewardTokens",
      "outputs": [
        {
          "components": [
            { "internalType": "address", "name": "token", "type": "address" },
            { "internalType": "uint256", "name": "accumulatedRewardsPerShare", "type": "uint256" }
          ],
          "internalType": "struct SingleSidedLiquidityVault.ExternalRewardToken[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getInternalRewardTokens",
      "outputs": [
        {
          "components": [
            { "internalType": "address", "name": "token", "type": "address" },
            { "internalType": "uint256", "name": "rewardsPerSecond", "type": "uint256" },
            { "internalType": "uint256", "name": "lastRewardTime", "type": "uint256" },
            { "internalType": "uint256", "name": "accumulatedRewardsPerShare", "type": "uint256" }
          ],
          "internalType": "struct SingleSidedLiquidityVault.InternalRewardToken[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOhmEmissions",
      "outputs": [
        { "internalType": "uint256", "name": "emitted", "type": "uint256" },
        { "internalType": "uint256", "name": "removed", "type": "uint256" }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }],
      "name": "internalRewardTokens",
      "outputs": [
        { "internalType": "address", "name": "token", "type": "address" },
        { "internalType": "uint256", "name": "rewardsPerSecond", "type": "uint256" },
        { "internalType": "uint256", "name": "lastRewardTime", "type": "uint256" },
        { "internalType": "uint256", "name": "accumulatedRewardsPerShare", "type": "uint256" }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        { "internalType": "uint256", "name": "id_", "type": "uint256" },
        { "internalType": "address", "name": "user_", "type": "address" }
      ],
      "name": "internalRewardsForToken",
      "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isActive",
      "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "kernel",
      "outputs": [{ "internalType": "contract Kernel", "name": "", "type": "address" }],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "liquidityPool",
      "outputs": [{ "internalType": "address", "name": "", "type": "address" }],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [{ "internalType": "address", "name": "", "type": "address" }],
      "name": "lpPositions",
      "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ohm",
      "outputs": [{ "internalType": "contract ERC20", "name": "", "type": "address" }],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ohmEthPriceFeed",
      "outputs": [
        { "internalType": "contract AggregatorV3Interface", "name": "feed", "type": "address" },
        { "internalType": "uint48", "name": "updateThreshold", "type": "uint48" }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ohmMinted",
      "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ohmRemoved",
      "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pairToken",
      "outputs": [{ "internalType": "contract ERC20", "name": "", "type": "address" }],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [{ "internalType": "address", "name": "", "type": "address" }],
      "name": "pairTokenDeposits",
      "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        { "internalType": "uint256", "name": "id_", "type": "uint256" },
        { "internalType": "address", "name": "token_", "type": "address" }
      ],
      "name": "removeExternalRewardToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        { "internalType": "uint256", "name": "id_", "type": "uint256" },
        { "internalType": "address", "name": "token_", "type": "address" }
      ],
      "name": "removeInternalRewardToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "requestPermissions",
      "outputs": [
        {
          "components": [
            { "internalType": "Keycode", "name": "keycode", "type": "bytes5" },
            { "internalType": "bytes4", "name": "funcSelector", "type": "bytes4" }
          ],
          "internalType": "struct Permissions[]",
          "name": "permissions",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [{ "internalType": "uint256", "name": "fee_", "type": "uint256" }],
      "name": "setFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [{ "internalType": "uint256", "name": "limit_", "type": "uint256" }],
      "name": "setLimit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [{ "internalType": "uint256", "name": "threshold_", "type": "uint256" }],
      "name": "setThreshold",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stethUsdPriceFeed",
      "outputs": [
        { "internalType": "contract AggregatorV3Interface", "name": "feed", "type": "address" },
        { "internalType": "uint48", "name": "updateThreshold", "type": "uint48" }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalLP",
      "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        { "internalType": "address", "name": "", "type": "address" },
        { "internalType": "address", "name": "", "type": "address" }
      ],
      "name": "userRewardDebts",
      "outputs": [{ "internalType": "int256", "name": "", "type": "int256" }],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vault",
      "outputs": [{ "internalType": "contract IVault", "name": "", "type": "address" }],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        { "internalType": "uint256", "name": "lpAmount_", "type": "uint256" },
        { "internalType": "uint256[]", "name": "minTokenAmounts_", "type": "uint256[]" },
        { "internalType": "bool", "name": "claim_", "type": "bool" }
      ],
      "name": "withdraw",
      "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "devdoc": {
    "kind": "dev",
    "methods": {
      "activate()": {
        "details": "This function can only be accessed by the liquidityvault_admin role"
      },
      "addExternalRewardToken(address)": {
        "details": "This function can only be accessed by the liquidityvault_admin role",
        "params": {
          "token_": "The address of the reward token"
        }
      },
      "addInternalRewardToken(address,uint256,uint256)": {
        "details": "This function can only be accessed by the liquidityvault_admin role",
        "params": {
          "rewardsPerSecond_": "The amount of reward tokens to distribute per second",
          "startTimestamp_": "The timestamp at which to start distributing rewards",
          "token_": "The address of the reward token"
        }
      },
      "claimFees()": {
        "details": "This function can only be accessed by the liquidityvault_admin role"
      },
      "configureDependencies()": {
        "returns": {
          "dependencies": "- Keycode array of module dependencies."
        }
      },
      "deactivate(uint256)": {
        "details": "This function can only be accessed by the liquidityvault_admin role"
      },
      "deposit(uint256,uint256)": {
        "details": "This needs to be non-reentrant since the contract only knows the amount of LP tokens it                         receives after an external interaction with the liquidity pool",
        "params": {
          "amount_": "The amount of pair tokens to deposit",
          "minLpAmount_": "The minimum amount of LP tokens to receive"
        }
      },
      "externalRewardsForToken(uint256,address)": {
        "params": {
          "id_": "The ID of the external reward token",
          "user_": "The user's address to check rewards for"
        },
        "returns": {
          "_0": "int256              The amount of rewards the user has earned"
        }
      },
      "getOhmEmissions()": {
        "details": "This is based on a point-in-time snapshot of the liquidity pool's current OHM balance",
        "returns": {
          "emitted": "            The amount of OHM that this contract has emitted to the broader market",
          "removed": "            The amount of OHM that this contract has removed from the broader market"
        }
      },
      "internalRewardsForToken(uint256,address)": {
        "params": {
          "id_": "The ID of the reward token",
          "user_": "The user's address to check rewards for"
        },
        "returns": {
          "_0": "int256              The amount of rewards the user has earned"
        }
      },
      "removeExternalRewardToken(uint256,address)": {
        "details": "This function can only be accessed by the liquidityvault_admin role",
        "params": {
          "id_": "The index of the reward token to remove",
          "token_": "The address of the reward token to remove"
        }
      },
      "removeInternalRewardToken(uint256,address)": {
        "details": "This function can only be accessed by the liquidityvault_admin role",
        "params": {
          "id_": "The index of the reward token to remove",
          "token_": "The address of the reward token to remove"
        }
      },
      "requestPermissions()": {
        "returns": {
          "permissions": "- Array of keycodes and function selectors for requested permissions."
        }
      },
      "setFee(uint256)": {
        "details": "This function can only be accessed by the liquidityvault_admin role",
        "params": {
          "fee_": "The new fee (out of 1000)"
        }
      },
      "setLimit(uint256)": {
        "details": "This function can only be accessed by the liquidityvault_admin role",
        "params": {
          "limit_": "The new limit"
        }
      },
      "setThreshold(uint256)": {
        "details": "This function can only be accessed by the liquidityvault_admin role",
        "params": {
          "threshold_": "The new threshold (out of 1000)"
        }
      },
      "withdraw(uint256,uint256[],bool)": {
        "details": "This needs to be non-reentrant since the contract only knows the amount of OHM and                             pair tokens it receives after an external call to withdraw liquidity",
        "params": {
          "lpAmount_": "The amount of LP tokens to withdraw",
          "minTokenAmounts_": "The minimum amounts of pair tokens and OHM to receive"
        }
      }
    },
    "title": "Olympus Base Single Sided Liquidity Vault Contract",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "activate()": {
        "notice": "Registers the vault in the LQREG contract"
      },
      "addExternalRewardToken(address)": {
        "notice": "Adds a new external reward token to the contract"
      },
      "addInternalRewardToken(address,uint256,uint256)": {
        "notice": "Adds a new internal reward token to the contract"
      },
      "changeKernel(address)": {
        "notice": "Function used by kernel when migrating to a new kernel."
      },
      "claimFees()": {
        "notice": "Transfers accumulated fees on reward tokens to the admin"
      },
      "claimRewards()": {
        "notice": "Claims user's rewards for all reward tokens"
      },
      "configureDependencies()": {
        "notice": "Define module dependencies for this policy."
      },
      "deactivate(uint256)": {
        "notice": "Unregisters the vault in the LQREG contract and sets the borrowable limit to 0"
      },
      "deposit(uint256,uint256)": {
        "notice": "Deposits pair tokens, mints OHM against the deposited pair tokens, and deposits the                         pair token and OHM into a liquidity pool and receives LP tokens in return"
      },
      "externalRewardTokens(uint256)": {
        "notice": "An external reward token is a token where the primary accrual of reward tokens occurs outside         the scope of this contract in a system like Convex or Aura. The vault is responsible for harvesting         rewards back to the vault and then distributing them proportionally to users"
      },
      "externalRewardsForToken(uint256,address)": {
        "notice": "Returns the amount of rewards a user has earned for a given external reward token"
      },
      "getOhmEmissions()": {
        "notice": "Calculates the net amount of OHM that this contract has emitted to or removed from the broader market"
      },
      "internalRewardTokens(uint256)": {
        "notice": "An internal reward token is a token where the vault is the only source of rewards and the         vault handles all accounting around how many reward tokens to distribute over time"
      },
      "internalRewardsForToken(uint256,address)": {
        "notice": "Returns the amount of rewards a user has earned for a given reward token"
      },
      "isActive()": {
        "notice": "Easily accessible indicator for if a policy is activated or not."
      },
      "removeExternalRewardToken(uint256,address)": {
        "notice": "Removes an external reward token from the contract"
      },
      "removeInternalRewardToken(uint256,address)": {
        "notice": "Removes an internal reward token from the contract"
      },
      "requestPermissions()": {
        "notice": "Function called by kernel to set module function permissions."
      },
      "setFee(uint256)": {
        "notice": "Updates the fee charged on rewards"
      },
      "setLimit(uint256)": {
        "notice": "Updates the maximum amount of OHM that can be minted by this contract"
      },
      "setThreshold(uint256)": {
        "notice": "Updates the threshold for the price deviation from the oracle price that is acceptable"
      },
      "withdraw(uint256,uint256[],bool)": {
        "notice": "Withdraws pair tokens and OHM from a liquidity pool, returns any received pair tokens to the                             user, and burns any received OHM"
      }
    },
    "version": 1
  }
}

{
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "gohm_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "staking_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "sdai_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "coolerFactory_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "kernel_",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "BadEscrow",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DurationMaximum",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "caller_",
          "type": "address"
        }
      ],
      "name": "KernelAdapter_OnlyKernel",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "LengthDiscrepancy",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyBurnable",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyFromFactory",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "Keycode",
          "name": "keycode_",
          "type": "bytes5"
        }
      ],
      "name": "Policy_ModuleDoesNotExist",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TooEarlyToFund",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "Deactivated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "Reactivated",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DURATION",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "FUND_AMOUNT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "FUND_CADENCE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "INTEREST_RATE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "LOAN_TO_COLLATERAL",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_REWARD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MINTR",
      "outputs": [
        {
          "internalType": "contract MINTRv1",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ROLES",
      "outputs": [
        {
          "internalType": "contract ROLESv1",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "TRSRY",
      "outputs": [
        {
          "internalType": "contract TRSRYv1",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "active",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract Kernel",
          "name": "newKernel_",
          "type": "address"
        }
      ],
      "name": "changeKernel",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "coolers_",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "loans_",
          "type": "uint256[]"
        }
      ],
      "name": "claimDefaulted",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "configureDependencies",
      "outputs": [
        {
          "internalType": "Keycode[]",
          "name": "dependencies",
          "type": "bytes5[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "dai",
      "outputs": [
        {
          "internalType": "contract ERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "collateral_",
          "type": "uint256"
        }
      ],
      "name": "debtForCollateral",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ERC20",
          "name": "token_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount_",
          "type": "uint256"
        }
      ],
      "name": "defund",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "emergencyShutdown",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "factory",
      "outputs": [
        {
          "internalType": "contract CoolerFactory",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fundTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "gOHM",
      "outputs": [
        {
          "internalType": "contract ERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "debt_",
          "type": "uint256"
        }
      ],
      "name": "interestFromDebt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isActive",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isCoolerCallback",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "kernel",
      "outputs": [
        {
          "internalType": "contract Kernel",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract Cooler",
          "name": "cooler_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount_",
          "type": "uint256"
        }
      ],
      "name": "lendToCooler",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "loanID_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "debt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "collateral",
          "type": "uint256"
        }
      ],
      "name": "onDefault",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "loanID_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount_",
          "type": "uint256"
        }
      ],
      "name": "onRepay",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "loanID_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "newDebt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "newCollateral",
          "type": "uint256"
        }
      ],
      "name": "onRoll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "reactivate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rebalance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "receivables",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "requestPermissions",
      "outputs": [
        {
          "components": [
            {
              "internalType": "Keycode",
              "name": "keycode",
              "type": "bytes5"
            },
            {
              "internalType": "bytes4",
              "name": "funcSelector",
              "type": "bytes4"
            }
          ],
          "internalType": "struct Permissions[]",
          "name": "requests",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract Cooler",
          "name": "cooler_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "loanID_",
          "type": "uint256"
        }
      ],
      "name": "rollLoan",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sdai",
      "outputs": [
        {
          "internalType": "contract ERC4626",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "staking",
      "outputs": [
        {
          "internalType": "contract IStaking",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sweepIntoDSR",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "devdoc": {
    "details": "The Olympus Clearinghouse is a lending facility built on top of Cooler Loans. The Clearinghouse         ensures that OHM holders can take loans against their gOHM holdings according to the parameters         approved by the community in OIP-144 and its subsequent RFCs. The Clearinghouse parameters are         immutable, because of that, if backing was to increase substantially, a new governance process         to fork this implementation with upgraded parameters should take place.         Although the Cooler contracts allow lenders to transfer ownership of their repayment rights, the         Clearinghouse doesn't implement any functions to use that feature.",
    "kind": "dev",
    "methods": {
      "claimDefaulted(address[],uint256[])": {
        "details": "Implements an auction style reward system that linearly increases up to a max reward.",
        "params": {
          "coolers_": "Array of contracts where the default must be claimed.",
          "loans_": "Array of defaulted loan ids."
        }
      },
      "debtForCollateral(uint256)": {
        "params": {
          "collateral_": "amount of gOHM."
        },
        "returns": {
          "_0": "debt (amount to be lent + interest) for a given collateral amount."
        }
      },
      "defund(address,uint256)": {
        "params": {
          "amount_": "to transfer.",
          "token_": "to transfer."
        }
      },
      "interestFromDebt(uint256)": {
        "params": {
          "debt_": "amount of gOHM."
        }
      },
      "lendToCooler(address,uint256)": {
        "details": "To simplify the UX and easily ensure that all holders get the same terms,         this function requests a new loan and clears it in the same transaction.",
        "params": {
          "amount_": "of DAI to lend.",
          "cooler_": "to lend to."
        },
        "returns": {
          "_0": "the id of the granted loan."
        }
      },
      "rebalance()": {
        "details": "Exposure is always capped at FUND_AMOUNT and rebalanced at up to FUND_CADANCE.         If several rebalances are available (because some were missed), calling this         function several times won't impact the funds controlled by the contract.         If the emergency shutdown is triggered, a rebalance will send funds back to         the treasury.",
        "returns": {
          "_0": "False if too early to rebalance. Otherwise, true."
        }
      },
      "rollLoan(address,uint256)": {
        "details": "To simplify the UX and easily ensure that all holders get the same terms,         this function provides the governance-approved terms for a rollover and         does the loan rollover in the same transaction.",
        "params": {
          "cooler_": "to provide terms.",
          "loanID_": "of loan in cooler."
        }
      }
    },
    "title": "Olympus Clearinghouse.",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "active()": {
        "notice": "determines whether the contract can be funded or not."
      },
      "changeKernel(address)": {
        "notice": "Function used by kernel when migrating to a new kernel."
      },
      "claimDefaulted(address[],uint256[])": {
        "notice": "Batch several default claims to save gas.         The elements on both arrays must be paired based on their index."
      },
      "configureDependencies()": {
        "notice": "Default framework setup."
      },
      "debtForCollateral(uint256)": {
        "notice": "view function computing loan for a collateral amount."
      },
      "defund(address,uint256)": {
        "notice": "Return funds to treasury."
      },
      "emergencyShutdown()": {
        "notice": "Deactivate the contract and return funds to treasury."
      },
      "fundTime()": {
        "notice": "timestamp at which the next rebalance can occur."
      },
      "interestFromDebt(uint256)": {
        "notice": "view function to compute the interest for a given debt amount."
      },
      "isActive()": {
        "notice": "Easily accessible indicator for if a policy is activated or not."
      },
      "isCoolerCallback()": {
        "notice": "Informs to Cooler that this contract can handle its callbacks."
      },
      "lendToCooler(address,uint256)": {
        "notice": "Lend to a cooler."
      },
      "onDefault(uint256,uint256,uint256)": {
        "notice": "Callback function that handles defaults."
      },
      "onRepay(uint256,uint256)": {
        "notice": "Callback function that handles repayments."
      },
      "onRoll(uint256,uint256,uint256)": {
        "notice": "Callback function that handles rollovers."
      },
      "reactivate()": {
        "notice": "Reactivate the contract."
      },
      "rebalance()": {
        "notice": "Fund loan liquidity from treasury."
      },
      "receivables()": {
        "notice": "outstanding loan receivables. Incremented when a loan is made or rolled. Decremented when a loan is repaid or collateral is burned."
      },
      "requestPermissions()": {
        "notice": "Default framework setup."
      },
      "rollLoan(address,uint256)": {
        "notice": "Rollover an existing loan."
      },
      "sweepIntoDSR()": {
        "notice": "Sweep excess DAI into vault."
      }
    },
    "notice": "Olympus Clearinghouse (Policy) Contract.",
    "version": 1
  }
}

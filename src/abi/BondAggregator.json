{
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id_",
          "type": "uint256"
        }
      ],
      "name": "currentCapacity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "payout_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "quote_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountIn_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minAmountOut_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxExpiry_",
          "type": "uint256"
        }
      ],
      "name": "findMarketFor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id_",
          "type": "uint256"
        }
      ],
      "name": "getAuctioneer",
      "outputs": [
        {
          "internalType": "contract IBondAuctioneer",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id_",
          "type": "uint256"
        }
      ],
      "name": "getTeller",
      "outputs": [
        {
          "internalType": "contract IBondTeller",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id_",
          "type": "uint256"
        }
      ],
      "name": "isInstantSwap",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id_",
          "type": "uint256"
        }
      ],
      "name": "isLive",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "firstIndex_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lastIndex_",
          "type": "uint256"
        }
      ],
      "name": "liveMarketsBetween",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token_",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "isPayout_",
          "type": "bool"
        }
      ],
      "name": "liveMarketsFor",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id_",
          "type": "uint256"
        }
      ],
      "name": "marketPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id_",
          "type": "uint256"
        }
      ],
      "name": "marketScale",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "payout_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "quote_",
          "type": "address"
        }
      ],
      "name": "marketsFor",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id_",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "referrer_",
          "type": "address"
        }
      ],
      "name": "maxAmountAccepted",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "id_",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "referrer_",
          "type": "address"
        }
      ],
      "name": "payoutFor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IBondAuctioneer",
          "name": "auctioneer_",
          "type": "address"
        }
      ],
      "name": "registerAuctioneer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ERC20",
          "name": "payoutToken_",
          "type": "address"
        },
        {
          "internalType": "contract ERC20",
          "name": "quoteToken_",
          "type": "address"
        }
      ],
      "name": "registerMarket",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "marketId",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "devdoc": {
    "kind": "dev",
    "methods": {
      "findMarketFor(address,address,uint256,uint256,uint256)": {
        "params": {
          "amountIn_": "Amount of quote tokens to deposit",
          "maxExpiry_": "Latest acceptable vesting timestamp for bond                         Inputting the zero address will take into account just the protocol fee.",
          "minAmountOut_": "Minimum amount of payout tokens to receive as payout",
          "payout_": "Address of payout token",
          "quote_": "Address of quote token"
        }
      },
      "getAuctioneer(uint256)": {
        "params": {
          "id_": "ID of Market"
        }
      },
      "isInstantSwap(uint256)": {
        "params": {
          "id_": "Market ID to search for"
        }
      },
      "isLive(uint256)": {
        "params": {
          "id_": "ID of market"
        }
      },
      "liveMarketsBetween(uint256,uint256)": {
        "details": "Should be used if length exceeds max to query entire array"
      },
      "liveMarketsFor(address,bool)": {
        "params": {
          "isPayout_": "If true, search by payout token, else search for quote token",
          "token_": "Address of token to query by"
        }
      },
      "marketPrice(uint256)": {
        "details": "Accounts for debt and control variable decay since last deposit (vs _marketPrice())",
        "params": {
          "id_": "ID of market"
        },
        "returns": {
          "_0": "Price for market (see the specific auctioneer for units)"
        }
      },
      "marketScale(uint256)": {
        "params": {
          "id_": "ID of market"
        },
        "returns": {
          "_0": "Scaling factor for market in configured decimals"
        }
      },
      "marketsFor(address,address)": {
        "params": {
          "payout_": "Address of payout token",
          "quote_": "Address of quote token"
        }
      },
      "maxAmountAccepted(uint256,address)": {
        "params": {
          "id_": "ID of market",
          "referrer_": "Address of referrer, used to get fees to calculate accurate payout amount.                     Inputting the zero address will take into account just the protocol fee."
        }
      },
      "payoutFor(uint256,uint256,address)": {
        "details": "Accounts for debt and control variable decay so it is up to date",
        "params": {
          "amount_": "Amount of quote tokens to spend",
          "id_": "ID of market",
          "referrer_": "Address of referrer, used to get fees to calculate accurate payout amount.                     Inputting the zero address will take into account just the protocol fee."
        },
        "returns": {
          "_0": "amount of payout tokens to be paid"
        }
      },
      "registerAuctioneer(address)": {
        "details": "A auctioneer must be registered with an aggregator to create markets",
        "params": {
          "auctioneer_": "Address of the Auctioneer to register"
        }
      },
      "registerMarket(address,address)": {
        "params": {
          "marketId": "ID of the market being created",
          "payoutToken_": "Token to be paid out by the market",
          "quoteToken_": "Token to be accepted by the market"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "currentCapacity(uint256)": {
        "notice": "Returns current capacity of a market"
      },
      "findMarketFor(address,address,uint256,uint256,uint256)": {
        "notice": "Returns the market ID with the highest current payoutToken payout for depositing quoteToken"
      },
      "getAuctioneer(uint256)": {
        "notice": "Get the auctioneer for the provided market ID"
      },
      "getTeller(uint256)": {
        "notice": "Returns the Teller that services the market ID"
      },
      "isInstantSwap(uint256)": {
        "notice": "Does market send payout immediately"
      },
      "isLive(uint256)": {
        "notice": "Is a given market accepting deposits"
      },
      "liveMarketsBetween(uint256,uint256)": {
        "notice": "Returns array of active market IDs within a range"
      },
      "liveMarketsFor(address,bool)": {
        "notice": "Returns an array of all active market IDs for a given quote token"
      },
      "marketPrice(uint256)": {
        "notice": "Calculate current market price of payout token in quote tokens"
      },
      "marketScale(uint256)": {
        "notice": "Scale value to use when converting between quote token and payout token amounts with marketPrice()"
      },
      "marketsFor(address,address)": {
        "notice": "Returns an array of all active market IDs for a given payout and quote token"
      },
      "maxAmountAccepted(uint256,address)": {
        "notice": "Returns maximum amount of quote token accepted by the market"
      },
      "payoutFor(uint256,uint256,address)": {
        "notice": "Payout due for amount of quote tokens"
      },
      "registerAuctioneer(address)": {
        "notice": "Register a auctioneer with the aggregatorOnly Guardian"
      },
      "registerMarket(address,address)": {
        "notice": "Register a new market with the aggregatorOnly registered depositories"
      }
    },
    "version": 1
  }
}

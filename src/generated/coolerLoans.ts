/**
 * Generated by orval v6.23.0 🍺
 * Do not edit manually.
 * Cooler Loans
 * OpenAPI spec version: 1.1
 */
import type { QueryFunction, QueryKey, UseQueryOptions, UseQueryResult } from "@tanstack/react-query";
import { useQuery } from "@tanstack/react-query";
import { customHttpClient } from "src/views/Lending/Cooler/hooks/customHttpClient";
export type GetSnapshots200 = {
  records?: Snapshot[];
};

export type GetSnapshotsParams = {
  /**
   * The start date (YYYY-MM-DD) of the loan period
   */
  startDate: string;
  /**
   * The date (YYYY-MM-DD) up to (but not including) which records should be retrieved
   */
  beforeDate: string;
};

/**
 * Represents the state of the Treasury at the time of the snapshot.
 */
export type SnapshotTreasury = {
  /** Total balance of DAI in the active treasury */
  daiBalance: number;
  /** Total balance of sDAI in the active treasury */
  sDaiBalance: number;
  /** Total balance of sDAI in terms of DAI in the active treasury */
  sDaiInDaiBalance: number;
};

/**
 * Current Clearinghouse terms
 */
export type SnapshotTerms = {
  /** Duration of the loan in seconds */
  duration: number;
  /** Interest rate as a decimal

e.g. 0.005 = 0.5% */
  interestRate: number;
  /** Value of the loan (in DAI) provided against the collateral */
  loanToCollateral: number;
};

/**
 * Principal due for each expiry bucket.
 */
export type SnapshotExpiryBuckets = {
  /** Principal due for loans that are active */
  active: number;
  /** Principal due for loans that are within 121 days of expiry */
  days121: number;
  /** Principal due for loans that are within 30 days of expiry */
  days30: number;
  /** Principal due for loans that are expired */
  expired: number;
};

/**
 * Totals for the Clearinghouses at the time of the snapshot.
 */
export type SnapshotClearinghouseTotals = {
  /** Total balance of DAI across all Clearinghouses */
  daiBalance: number;
  /** Total balance of sDAI across all Clearinghouses */
  sDaiBalance: number;
  /** Total balance of sDAI in terms of DAI across all Clearinghouses */
  sDaiInDaiBalance: number;
};

export type SnapshotClearinghousesItem = {
  /** Address of the Clearinghouse */
  address: string;
  /** The address of the collateral */
  collateralAddress: string;
  /** The address of the CoolerFactory */
  coolerFactoryAddress: string;
  /** Balance of DAI */
  daiBalance: number;
  /** The address of the debt */
  debtAddress: string;
  /** Amount of DAI that the Clearinghouse should be funded with */
  fundAmount: number;
  /** The cadence of the funding */
  fundCadence: number;
  /** Balance of sDAI */
  sDaiBalance: number;
  /** Balance of sDAI in terms of DAI */
  sDaiInDaiBalance: number;
};

export type Snapshot = {
  /** State of the Clearinghouses at the time of the snapshot. */
  clearinghouses: SnapshotClearinghousesItem[];
  /** Totals for the Clearinghouses at the time of the snapshot. */
  clearinghouseTotals: SnapshotClearinghouseTotals;
  /** Quantity of collateral deposited across all Coolers */
  collateralDeposited: number;
  /** Income from collateral reclaimed on this date. */
  collateralIncome: number;
  /** Principal due for each expiry bucket. */
  expiryBuckets: SnapshotExpiryBuckets;
  /** Income from interest payments made on this date. */
  interestIncome: number;
  /** Interest receivable across all Coolers */
  interestReceivables: number;
  /** Principal receivable across all Coolers */
  principalReceivables: number;
  /** Date of the snapshot.

Times are stored at UTC. */
  snapshotDate: string;
  /** Current Clearinghouse terms */
  terms: SnapshotTerms;
  /** Represents the state of the Treasury at the time of the snapshot. */
  treasury: SnapshotTreasury;
};

/**
 * @summary Retrieves all Cooler Loans snapshots between the given dates.
 */
export const getSnapshots = (params: GetSnapshotsParams, signal?: AbortSignal) => {
  return customHttpClient<GetSnapshots200>({ url: `/`, method: "GET", params, signal });
};

export const getGetSnapshotsQueryKey = (params: GetSnapshotsParams) => {
  return [`/`, ...(params ? [params] : [])] as const;
};

export const getGetSnapshotsQueryOptions = <TData = Awaited<ReturnType<typeof getSnapshots>>, TError = unknown>(
  params: GetSnapshotsParams,
  options?: { query?: UseQueryOptions<Awaited<ReturnType<typeof getSnapshots>>, TError, TData> },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetSnapshotsQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getSnapshots>>> = ({ signal }) => getSnapshots(params, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getSnapshots>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetSnapshotsQueryResult = NonNullable<Awaited<ReturnType<typeof getSnapshots>>>;
export type GetSnapshotsQueryError = unknown;

/**
 * @summary Retrieves all Cooler Loans snapshots between the given dates.
 */
export const useGetSnapshots = <TData = Awaited<ReturnType<typeof getSnapshots>>, TError = unknown>(
  params: GetSnapshotsParams,
  options?: { query?: UseQueryOptions<Awaited<ReturnType<typeof getSnapshots>>, TError, TData> },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetSnapshotsQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

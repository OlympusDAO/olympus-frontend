/**
 * Generated by orval v6.23.0 🍺
 * Do not edit manually.
 * Cooler Loans
 * OpenAPI spec version: 1.1
 */
import type { QueryFunction, QueryKey, UseQueryOptions, UseQueryResult } from "@tanstack/react-query";
import { useQuery } from "@tanstack/react-query";
import { customHttpClient } from "src/views/Lending/Cooler/hooks/customHttpClient";
export type GetEarliestSnapshot200 = {
  record?: Snapshot;
};

export type GetCurrentSnapshot200 = {
  record?: Snapshot;
};

export type GetSnapshots200 = {
  records?: Snapshot[];
};

export type GetSnapshotsOrderBy = (typeof GetSnapshotsOrderBy)[keyof typeof GetSnapshotsOrderBy];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetSnapshotsOrderBy = {
  ASC: "ASC",
  DESC: "DESC",
} as const;

export type GetSnapshotsParams = {
  /**
   * The start date (YYYY-MM-DD) of the loan period
   */
  startDate: string;
  /**
   * The date (YYYY-MM-DD) up to (but not including) which records should be retrieved
   */
  beforeDate: string;
  /**
   * The order in which to return the snapshots. ASC or DESC
   */
  orderBy?: GetSnapshotsOrderBy;
};

/**
 * Represents the state of the Treasury at the time of the snapshot.
 */
export type SnapshotTreasury = {
  /** Total balance of the DAI token in the active treasury */
  daiBalance: number;
  /** Total balance of the sDAI token in the active treasury */
  sDaiBalance: number;
  /** Total balance of the sDAI token in terms of DAI in the active treasury */
  sDaiInDaiBalance: number;
  /** Total balance of the sUSDS token in the active treasury */
  sUsdsBalance: number;
  /** Total balance of the sUSDS token in terms of USDS in the active treasury */
  sUsdsInUsdsBalance: number;
  /** Total balance of the USDS token in the active treasury */
  usdsBalance: number;
};

/**
 * Current Clearinghouse terms
 */
export type SnapshotTerms = {
  /** Duration of the loan in seconds */
  duration: number;
  /** Interest rate as a decimal

e.g. 0.005 = 0.5% */
  interestRate: number;
  /** Value of the loan (in DAI) provided against the collateral */
  loanToCollateral: number;
};

/**
 * Principal due for each expiry bucket.
 */
export type SnapshotExpiryBuckets = {
  /** Principal due for loans that are active */
  active: number;
  /** Principal due for loans that are within 121 days of expiry */
  days121: number;
  /** Principal due for loans that are within 30 days of expiry */
  days30: number;
  /** Principal due for loans that are expired */
  expired: number;
};

/**
 * Totals for the Clearinghouses at the time of the snapshot.
 */
export type SnapshotClearinghouseTotals = {
  /** Total balance of the DAI token across all Clearinghouses */
  daiBalance: number;
  /** Total balance of the sDAI token across all Clearinghouses */
  sDaiBalance: number;
  /** Total balance of the sDAI token in terms of DAI  across all Clearinghouses */
  sDaiInDaiBalance: number;
  /** Total balance of the sUSDS token across all Clearinghouses */
  sUsdsBalance: number;
  /** Total balance of the sUSDS token in terms of USDS across all Clearinghouses */
  sUsdsInUsdsBalance: number;
  /** Total balance of the USDS token across all Clearinghouses */
  usdsBalance: number;
};

export type SnapshotClearinghousesItem = {
  /** Address of the Clearinghouse */
  address: string;
  /** The address of the collateral */
  collateralAddress: string;
  /** The address of the CoolerFactory */
  coolerFactoryAddress: string;
  /** The address of the debt */
  debtAddress: string;
  /** Amount of the reserve token that the Clearinghouse should be funded with */
  fundAmount: number;
  /** The cadence of the funding */
  fundCadence: number;
  /** Balance of the reserve token */
  reserveBalance: number;
  /** Balance of the sReserve token */
  sReserveBalance: number;
  /** Balance of the sReserve token in terms of the reserve token */
  sReserveInReserveBalance: number;
};

export type Snapshot = {
  /** State of the Clearinghouses at the time of the snapshot. */
  clearinghouses: SnapshotClearinghousesItem[];
  /** Totals for the Clearinghouses at the time of the snapshot. */
  clearinghouseTotals: SnapshotClearinghouseTotals;
  /** Quantity of collateral reclaimed on this date. */
  collateralClaimedQuantity: number;
  /** USD value of collateral claimed on this date. */
  collateralClaimedValue: number;
  /** Quantity of collateral deposited across all Coolers */
  collateralDeposited: number;
  /** USD value of the income recognised from claiming the loan's collateral.

As collateral is returned to the borrower as they repay the loan principal, the collateral at any point in time covers the principal outstanding.

The income is therefore calculated as:

collateralValueAtClaim - principalOutstanding */
  collateralIncome: number;
  /** Principal due for each expiry bucket. */
  expiryBuckets: SnapshotExpiryBuckets;
  /** Income from interest payments made on this date. */
  interestIncome: number;
  /** Interest receivable across all Coolers */
  interestReceivables: number;
  /** Principal receivable across all Coolers */
  principalReceivables: number;
  /** Date of the snapshot.

Times are stored at UTC. */
  snapshotDate: string;
  /** Current Clearinghouse terms */
  terms: SnapshotTerms;
  /** Represents the state of the Treasury at the time of the snapshot. */
  treasury: SnapshotTreasury;
};

/**
 * @summary Retrieves all Cooler Loans snapshots between the given dates.
 */
export const getSnapshots = (params: GetSnapshotsParams, signal?: AbortSignal) => {
  return customHttpClient<GetSnapshots200>({ url: `/snapshots`, method: "GET", params, signal });
};

export const getGetSnapshotsQueryKey = (params: GetSnapshotsParams) => {
  return [`/snapshots`, ...(params ? [params] : [])] as const;
};

export const getGetSnapshotsQueryOptions = <TData = Awaited<ReturnType<typeof getSnapshots>>, TError = unknown>(
  params: GetSnapshotsParams,
  options?: { query?: UseQueryOptions<Awaited<ReturnType<typeof getSnapshots>>, TError, TData> },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetSnapshotsQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getSnapshots>>> = ({ signal }) => getSnapshots(params, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getSnapshots>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetSnapshotsQueryResult = NonNullable<Awaited<ReturnType<typeof getSnapshots>>>;
export type GetSnapshotsQueryError = unknown;

/**
 * @summary Retrieves all Cooler Loans snapshots between the given dates.
 */
export const useGetSnapshots = <TData = Awaited<ReturnType<typeof getSnapshots>>, TError = unknown>(
  params: GetSnapshotsParams,
  options?: { query?: UseQueryOptions<Awaited<ReturnType<typeof getSnapshots>>, TError, TData> },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetSnapshotsQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * The current snapshot is the most recent one up to the current date.
 * @summary Retrieves the current Cooler Loans snapshot
 */
export const getCurrentSnapshot = (signal?: AbortSignal) => {
  return customHttpClient<GetCurrentSnapshot200>({ url: `/snapshots/current`, method: "GET", signal });
};

export const getGetCurrentSnapshotQueryKey = () => {
  return [`/snapshots/current`] as const;
};

export const getGetCurrentSnapshotQueryOptions = <
  TData = Awaited<ReturnType<typeof getCurrentSnapshot>>,
  TError = unknown,
>(options?: {
  query?: UseQueryOptions<Awaited<ReturnType<typeof getCurrentSnapshot>>, TError, TData>;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetCurrentSnapshotQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getCurrentSnapshot>>> = ({ signal }) =>
    getCurrentSnapshot(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getCurrentSnapshot>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetCurrentSnapshotQueryResult = NonNullable<Awaited<ReturnType<typeof getCurrentSnapshot>>>;
export type GetCurrentSnapshotQueryError = unknown;

/**
 * @summary Retrieves the current Cooler Loans snapshot
 */
export const useGetCurrentSnapshot = <
  TData = Awaited<ReturnType<typeof getCurrentSnapshot>>,
  TError = unknown,
>(options?: {
  query?: UseQueryOptions<Awaited<ReturnType<typeof getCurrentSnapshot>>, TError, TData>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetCurrentSnapshotQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * @summary Retrieves the earliest Cooler Loans snapshot
 */
export const getEarliestSnapshot = (signal?: AbortSignal) => {
  return customHttpClient<GetEarliestSnapshot200>({ url: `/snapshots/earliest`, method: "GET", signal });
};

export const getGetEarliestSnapshotQueryKey = () => {
  return [`/snapshots/earliest`] as const;
};

export const getGetEarliestSnapshotQueryOptions = <
  TData = Awaited<ReturnType<typeof getEarliestSnapshot>>,
  TError = unknown,
>(options?: {
  query?: UseQueryOptions<Awaited<ReturnType<typeof getEarliestSnapshot>>, TError, TData>;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetEarliestSnapshotQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getEarliestSnapshot>>> = ({ signal }) =>
    getEarliestSnapshot(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getEarliestSnapshot>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetEarliestSnapshotQueryResult = NonNullable<Awaited<ReturnType<typeof getEarliestSnapshot>>>;
export type GetEarliestSnapshotQueryError = unknown;

/**
 * @summary Retrieves the earliest Cooler Loans snapshot
 */
export const useGetEarliestSnapshot = <
  TData = Awaited<ReturnType<typeof getEarliestSnapshot>>,
  TError = unknown,
>(options?: {
  query?: UseQueryOptions<Awaited<ReturnType<typeof getEarliestSnapshot>>, TError, TData>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetEarliestSnapshotQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * Generated by orval v6.17.0 üç∫
 * Do not edit manually.
 * Cooler Loans
 * OpenAPI spec version: 1.0
 */
import type { QueryFunction, QueryKey, UseQueryOptions, UseQueryResult } from "@tanstack/react-query";
import { useQuery } from "@tanstack/react-query";
import type { AxiosError, AxiosRequestConfig, AxiosResponse } from "axios";
import axios from "axios";
export type GetSnapshotsParams = {
  /**
   * The start date (YYYY-MM-DD) of the loan period
   */
  startDate: string;
  /**
   * The date (YYYY-MM-DD) up to (but not including) which records should be retrieved
   */
  beforeDate: string;
};

export type SnapshotTreasury = {
  daiBalance?: number;
  sDaiBalance?: number;
  sDaiInDaiBalance?: number;
};

export type SnapshotLoansStatus = (typeof SnapshotLoansStatus)[keyof typeof SnapshotLoansStatus];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const SnapshotLoansStatus = {
  Active: "Active",
  Expired: "Expired",
  Reclaimed: "Reclaimed",
  Repaid: "Repaid",
} as const;

/**
 * Dictionary of the loans that had been created by this date.

Key: `cooler address`-`loanId`
Value: Loan record
 */
export type SnapshotLoans = {
  [key: string]: {
    borrowerAddress?: string;
    collateralClaimedQuantity?: number;
    collateralClaimedValue?: number;
    collateralDeposited?: number;
    collateralIncome?: number;
    coolerAddress?: string;
    createdTimestamp?: number;
    expiryTimestamp?: number;
    /** cooler-loanId */
    id?: string;
    interest?: number;
    interestPaid?: number;
    lenderAddress?: string;
    loanId?: number;
    principal?: number;
    principalPaid?: number;
    secondsToExpiry?: number;
    status?: SnapshotLoansStatus;
  };
};

export type SnapshotClearinghouse = {
  daiBalance?: number;
  sDaiBalance?: number;
  sDaiInDaiBalance?: number;
};

export interface Snapshot {
  clearinghouse?: SnapshotClearinghouse;
  clearinghouseEvents?: ClearinghouseSnapshotOptional[];
  creationEvents?: ClearLoanRequestEventOptional[];
  date?: string;
  defaultedClaimEvents?: ClaimDefaultedLoanEventOptional[];
  extendEvents?: ExtendLoanEventOptional[];
  interestReceivables?: number;
  /** Dictionary of the loans that had been created by this date.

Key: `cooler address`-`loanId`
Value: Loan record */
  loans?: SnapshotLoans;
  principalReceivables?: number;
  repaymentEvents?: RepayLoanEventOptional[];
  treasury?: SnapshotTreasury;
}

export type GetSnapshots200 = {
  records?: Snapshot[];
};

export type RepayLoanEventOptionalAllOfLoan = {
  id?: string;
};

export type RepayLoanEventOptionalAllOf = {
  loan?: RepayLoanEventOptionalAllOfLoan;
};

export interface OmitRepayLoanEventLoan {
  amountPaid?: number;
  blockNumber?: number;
  blockTimestamp?: number;
  collateralDeposited?: number;
  date?: string;
  id?: string;
  interestPayable?: number;
  principalPayable?: number;
  secondsToExpiry?: number;
  transactionHash?: string;
}

export type RepayLoanEventOptional = OmitRepayLoanEventLoan & RepayLoanEventOptionalAllOf;

export type ExtendLoanEventOptionalAllOfLoan = {
  id?: string;
};

export type ExtendLoanEventOptionalAllOf = {
  loan?: ExtendLoanEventOptionalAllOfLoan;
};

export interface OmitExtendLoanEventLoan {
  blockNumber?: number;
  blockTimestamp?: number;
  date?: string;
  expiryTimestamp?: number;
  id?: string;
  interestDue?: number;
  periods?: number;
  transactionHash?: string;
}

export type ExtendLoanEventOptional = OmitExtendLoanEventLoan & ExtendLoanEventOptionalAllOf;

export type ClaimDefaultedLoanEventOptionalAllOfLoan = {
  id?: string;
};

export type ClaimDefaultedLoanEventOptionalAllOf = {
  loan?: ClaimDefaultedLoanEventOptionalAllOfLoan;
};

export interface OmitClaimDefaultedLoanEventLoan {
  blockNumber?: number;
  blockTimestamp?: number;
  collateralPrice?: number;
  collateralQuantityClaimed?: number;
  collateralValueClaimed?: number;
  date?: string;
  id?: string;
  secondsSinceExpiry?: number;
  transactionHash?: string;
}

export type ClaimDefaultedLoanEventOptional = OmitClaimDefaultedLoanEventLoan & ClaimDefaultedLoanEventOptionalAllOf;

export interface CoolerLoanOptional {
  borrower?: string;
  collateral?: number;
  collateralToken?: string;
  cooler?: string;
  createdBlock?: number;
  createdTimestamp?: number;
  createdTransaction?: string;
  debtToken?: string;
  expiryTimestamp?: number;
  hasCallback?: boolean;
  id?: string;
  interest?: number;
  lender?: string;
  loanId?: number;
  principal?: number;
}

export type ClearLoanRequestEventOptionalAllOf = {
  loan?: CoolerLoanOptional;
};

export interface OmitClearLoanRequestEventLoanRequest {
  blockNumber?: number;
  blockTimestamp?: number;
  date?: string;
  id?: string;
  transactionHash?: string;
}

export type ClearLoanRequestEventOptional = OmitClearLoanRequestEventLoanRequest & ClearLoanRequestEventOptionalAllOf;

export interface ClearinghouseSnapshotOptional {
  blockNumber?: number;
  blockTimestamp?: number;
  clearinghouse?: string;
  daiBalance?: number;
  date?: string;
  id?: string;
  interestReceivables?: number;
  isActive?: boolean;
  nextRebalanceTimestamp?: number;
  principalReceivables?: number;
  sDaiBalance?: number;
  sDaiInDaiBalance?: number;
  treasuryDaiBalance?: number;
  treasurySDaiBalance?: number;
  treasurySDaiInDaiBalance?: number;
}

type AwaitedInput<T> = PromiseLike<T> | T;

type Awaited<O> = O extends AwaitedInput<infer T> ? T : never;

/**
 * @summary Retrieves all Cooler Loans snapshots between the given dates.
 */
export const getSnapshots = (
  params: GetSnapshotsParams,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<GetSnapshots200>> => {
  return axios.get(`/`, {
    ...options,
    params: { ...params, ...options?.params },
  });
};

export const getGetSnapshotsQueryKey = (params: GetSnapshotsParams) => [`/`, ...(params ? [params] : [])] as const;

export const getGetSnapshotsQueryOptions = <
  TData = Awaited<ReturnType<typeof getSnapshots>>,
  TError = AxiosError<unknown>,
>(
  params: GetSnapshotsParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof getSnapshots>>, TError, TData>;
    axios?: AxiosRequestConfig;
  },
): UseQueryOptions<Awaited<ReturnType<typeof getSnapshots>>, TError, TData> & { queryKey: QueryKey } => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetSnapshotsQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getSnapshots>>> = ({ signal }) =>
    getSnapshots(params, { signal, ...axiosOptions });

  return { queryKey, queryFn, ...queryOptions };
};

export type GetSnapshotsQueryResult = NonNullable<Awaited<ReturnType<typeof getSnapshots>>>;
export type GetSnapshotsQueryError = AxiosError<unknown>;

/**
 * @summary Retrieves all Cooler Loans snapshots between the given dates.
 */
export const useGetSnapshots = <TData = Awaited<ReturnType<typeof getSnapshots>>, TError = AxiosError<unknown>>(
  params: GetSnapshotsParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof getSnapshots>>, TError, TData>;
    axios?: AxiosRequestConfig;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetSnapshotsQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};
